{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nimport { useMemo, Children, isValidElement, cloneElement } from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport { mergeDeep } from '../../helpers/merge-deep.mjs';\nimport { getTheme } from '../../theme-store/index.mjs';\nconst processChildren = (children, outline, pill) => {\n  return Children.map(children, (child, index) => {\n    if (isValidElement(child)) {\n      if (child.props.children) {\n        return cloneElement(child, {\n          ...child.props,\n          children: processChildren(child.props.children, outline, pill),\n          positionInGroup: determinePosition(index, Children.count(children))\n        });\n      } else {\n        return cloneElement(child, {\n          outline,\n          pill,\n          positionInGroup: determinePosition(index, Children.count(children))\n        });\n      }\n    }\n    return child;\n  });\n};\nconst determinePosition = (index, totalChildren) => {\n  return index === 0 ? \"start\" : index === totalChildren - 1 ? \"end\" : \"middle\";\n};\nconst ButtonGroup = _ref => {\n  let {\n    children,\n    className,\n    outline,\n    pill,\n    theme: customTheme = {},\n    ...props\n  } = _ref;\n  const items = useMemo(() => processChildren(children, outline, pill), [children, outline, pill]);\n  const theme = mergeDeep(getTheme().buttonGroup, customTheme);\n  return /* @__PURE__ */jsx(\"div\", {\n    className: twMerge(theme.base, className),\n    role: \"group\",\n    ...props,\n    children: items\n  });\n};\nButtonGroup.displayName = \"Button.Group\";\nexport { ButtonGroup };","map":{"version":3,"names":["processChildren","children","outline","pill","Children","map","child","index","isValidElement","props","cloneElement","positionInGroup","determinePosition","count","totalChildren","ButtonGroup","_ref","className","theme","customTheme","items","useMemo","mergeDeep","getTheme","buttonGroup","jsx","twMerge","base","role","displayName"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\Button\\ButtonGroup.tsx"],"sourcesContent":["import type { ComponentProps, FC, ReactElement, ReactNode } from \"react\";\nimport { Children, cloneElement, isValidElement, useMemo } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport { mergeDeep } from \"../../helpers/merge-deep\";\nimport { getTheme } from \"../../theme-store\";\nimport type { DeepPartial } from \"../../types\";\nimport type { ButtonProps } from \"../Button\";\n\nexport interface FlowbiteButtonGroupTheme {\n  base: string;\n  position: PositionInButtonGroup;\n}\n\nexport interface PositionInButtonGroup {\n  none: string;\n  start: string;\n  middle: string;\n  end: string;\n}\n\nexport interface ButtonGroupProps extends ComponentProps<\"div\">, Pick<ButtonProps, \"outline\" | \"pill\"> {\n  theme?: DeepPartial<FlowbiteButtonGroupTheme>;\n}\n\nconst processChildren = (\n  children: React.ReactNode,\n  outline: boolean | undefined,\n  pill: boolean | undefined,\n): ReactNode => {\n  return Children.map(children as ReactElement<ButtonProps>[], (child, index) => {\n    if (isValidElement(child)) {\n      // Check if the child has nested children\n      if (child.props.children) {\n        // Recursively process nested children\n        return cloneElement(child, {\n          ...child.props,\n          children: processChildren(child.props.children, outline, pill),\n          positionInGroup: determinePosition(index, Children.count(children)),\n        });\n      } else {\n        return cloneElement(child, {\n          outline,\n          pill,\n          positionInGroup: determinePosition(index, Children.count(children)),\n        });\n      }\n    }\n    return child;\n  });\n};\n\nconst determinePosition = (index: number, totalChildren: number) => {\n  return index === 0 ? \"start\" : index === totalChildren - 1 ? \"end\" : \"middle\";\n};\n\nexport const ButtonGroup: FC<ButtonGroupProps> = ({\n  children,\n  className,\n  outline,\n  pill,\n  theme: customTheme = {},\n  ...props\n}: ButtonGroupProps) => {\n  const items = useMemo(() => processChildren(children, outline, pill), [children, outline, pill]);\n\n  const theme = mergeDeep(getTheme().buttonGroup, customTheme);\n\n  return (\n    <div className={twMerge(theme.base, className)} role=\"group\" {...props}>\n      {items}\n    </div>\n  );\n};\n\nButtonGroup.displayName = \"Button.Group\";\n"],"mappings":";;;;;AAMA,MAAMA,eAAe,GAAGA,CAACC,QAAQ,EAAEC,OAAO,EAAEC,IAAI,KAAK;EACnD,OAAOC,QAAQ,CAACC,GAAG,CAACJ,QAAQ,EAAE,CAACK,KAAK,EAAEC,KAAK,KAAK;IAC9C,IAAIC,cAAc,CAACF,KAAK,CAAC,EAAE;MACzB,IAAIA,KAAK,CAACG,KAAK,CAACR,QAAQ,EAAE;QACxB,OAAOS,YAAY,CAACJ,KAAK,EAAE;UACzB,GAAGA,KAAK,CAACG,KAAK;UACdR,QAAQ,EAAED,eAAe,CAACM,KAAK,CAACG,KAAK,CAACR,QAAQ,EAAEC,OAAO,EAAEC,IAAI,CAAC;UAC9DQ,eAAe,EAAEC,iBAAiB,CAACL,KAAK,EAAEH,QAAQ,CAACS,KAAK,CAACZ,QAAQ,CAAC;QAC5E,CAAS,CAAC;MACV,CAAO,MAAM;QACL,OAAOS,YAAY,CAACJ,KAAK,EAAE;UACzBJ,OAAO;UACPC,IAAI;UACJQ,eAAe,EAAEC,iBAAiB,CAACL,KAAK,EAAEH,QAAQ,CAACS,KAAK,CAACZ,QAAQ,CAAC;QAC5E,CAAS,CAAC;MACV;IACA;IACI,OAAOK,KAAK;EAChB,CAAG,CAAC;AACJ,CAAC;AACD,MAAMM,iBAAiB,GAAGA,CAACL,KAAK,EAAEO,aAAa,KAAK;EAClD,OAAOP,KAAK,KAAK,CAAC,GAAG,OAAO,GAAGA,KAAK,KAAKO,aAAa,GAAG,CAAC,GAAG,KAAK,GAAG,QAAQ;AAC/E,CAAC;AACW,MAACC,WAAW,GAAGC,IAAA,IAOrB;EAAA,IAPsB;IAC1Bf,QAAQ;IACRgB,SAAS;IACTf,OAAO;IACPC,IAAI;IACJe,KAAK,EAAEC,WAAW,GAAG,EAAE;IACvB,GAAGV;EACL,CAAC,GAAAO,IAAA;EACC,MAAMI,KAAK,GAAGC,OAAO,CAAC,MAAMrB,eAAe,CAACC,QAAQ,EAAEC,OAAO,EAAEC,IAAI,CAAC,EAAE,CAACF,QAAQ,EAAEC,OAAO,EAAEC,IAAI,CAAC,CAAC;EAChG,MAAMe,KAAK,GAAGI,SAAS,CAACC,QAAQ,EAAE,CAACC,WAAW,EAAEL,WAAW,CAAC;EAC5D,sBAAuBM,GAAG,CAAC,KAAK,EAAE;IAAER,SAAS,EAAES,OAAO,CAACR,KAAK,CAACS,IAAI,EAAEV,SAAS,CAAC;IAAEW,IAAI,EAAE,OAAO;IAAE,GAAGnB,KAAK;IAAER,QAAQ,EAAEmB;EAAK,CAAE,CAAC;AAC5H;AACAL,WAAW,CAACc,WAAW,GAAG,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}