{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { forwardRef, useId } from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport { mergeDeep } from '../../helpers/merge-deep.mjs';\nimport { Badge } from '../Badge/Badge.mjs';\nimport { Tooltip } from '../Tooltip/Tooltip.mjs';\nimport { useSidebarContext } from './SidebarContext.mjs';\nimport { useSidebarItemContext } from './SidebarItemContext.mjs';\nconst ListItem = ({\n  id,\n  theme,\n  isCollapsed,\n  tooltipChildren,\n  children: wrapperChildren,\n  ...props\n}) => /* @__PURE__ */jsx(\"li\", {\n  ...props,\n  children: isCollapsed ? /* @__PURE__ */jsx(Tooltip, {\n    content: /* @__PURE__ */jsx(Children, {\n      id,\n      theme,\n      children: tooltipChildren\n    }),\n    placement: \"right\",\n    children: wrapperChildren\n  }) : wrapperChildren\n});\nconst Children = ({\n  id,\n  theme,\n  children\n}) => {\n  return /* @__PURE__ */jsx(\"span\", {\n    \"data-testid\": \"flowbite-sidebar-item-content\",\n    id: `flowbite-sidebar-item-${id}`,\n    className: twMerge(theme.content.base),\n    children\n  });\n};\nconst SidebarItem = forwardRef(({\n  active: isActive,\n  as: Component = \"a\",\n  children,\n  className,\n  icon: Icon,\n  label,\n  labelColor = \"info\",\n  theme: customTheme = {},\n  ...props\n}, ref) => {\n  const id = useId();\n  const {\n    theme: rootTheme,\n    isCollapsed\n  } = useSidebarContext();\n  const {\n    isInsideCollapse\n  } = useSidebarItemContext();\n  const theme = mergeDeep(rootTheme.item, customTheme);\n  return /* @__PURE__ */jsx(ListItem, {\n    theme,\n    className: theme.listItem,\n    id,\n    isCollapsed,\n    tooltipChildren: children,\n    children: /* @__PURE__ */jsxs(Component, {\n      \"aria-labelledby\": `flowbite-sidebar-item-${id}`,\n      ref,\n      className: twMerge(theme.base, isActive && theme.active, !isCollapsed && isInsideCollapse && theme.collapsed?.insideCollapse, className),\n      ...props,\n      children: [Icon && /* @__PURE__ */jsx(Icon, {\n        \"aria-hidden\": true,\n        \"data-testid\": \"flowbite-sidebar-item-icon\",\n        className: twMerge(theme.icon?.base, isActive && theme.icon?.active)\n      }), isCollapsed && !Icon && /* @__PURE__ */jsx(\"span\", {\n        className: theme.collapsed?.noIcon,\n        children: children.charAt(0).toLocaleUpperCase() ?? \"?\"\n      }), !isCollapsed && /* @__PURE__ */jsx(Children, {\n        id,\n        theme,\n        children\n      }), !isCollapsed && label && /* @__PURE__ */jsx(Badge, {\n        color: labelColor,\n        \"data-testid\": \"flowbite-sidebar-label\",\n        hidden: isCollapsed,\n        className: theme.label,\n        children: label\n      })]\n    })\n  });\n});\nSidebarItem.displayName = \"Sidebar.Item\";\nexport { SidebarItem };","map":{"version":3,"names":["ListItem","id","theme","isCollapsed","tooltipChildren","children","wrapperChildren","props","jsx","Tooltip","content","Children","placement","className","twMerge","base","SidebarItem","forwardRef","active","isActive","as","Component","icon","Icon","label","labelColor","customTheme","ref","useId","rootTheme","useSidebarContext","isInsideCollapse","useSidebarItemContext","mergeDeep","item","listItem","jsxs","collapsed","insideCollapse","noIcon","charAt","toLocaleUpperCase","Badge","color","hidden"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\Sidebar\\SidebarItem.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps, ElementType, FC, PropsWithChildren, ReactNode } from \"react\";\nimport { forwardRef, useId } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport { mergeDeep } from \"../../helpers/merge-deep\";\nimport type { DeepPartial } from \"../../types\";\nimport { Badge } from \"../Badge\";\nimport type { FlowbiteColors } from \"../Flowbite\";\nimport { Tooltip } from \"../Tooltip\";\nimport { useSidebarContext } from \"./SidebarContext\";\nimport { useSidebarItemContext } from \"./SidebarItemContext\";\n\nexport interface FlowbiteSidebarItemTheme {\n  active: string;\n  base: string;\n  collapsed: {\n    insideCollapse: string;\n    noIcon: string;\n  };\n  content: {\n    base: string;\n  };\n  icon: {\n    base: string;\n    active: string;\n  };\n  label: string;\n  listItem: string;\n}\n\nexport interface SidebarItemProps extends Omit<ComponentProps<\"div\">, \"ref\">, Record<string, unknown> {\n  active?: boolean;\n  as?: ElementType;\n  href?: string;\n  icon?: FC<ComponentProps<\"svg\">>;\n  label?: string;\n  labelColor?: keyof SidebarItemLabelColors;\n  theme?: DeepPartial<FlowbiteSidebarItemTheme>;\n}\n\nexport interface SidebarItemLabelColors extends Pick<FlowbiteColors, \"gray\"> {\n  [key: string]: string;\n}\n\nconst ListItem: FC<\n  PropsWithChildren<{\n    id: string;\n    theme: FlowbiteSidebarItemTheme;\n    isCollapsed: boolean;\n    tooltipChildren: ReactNode | undefined;\n    className?: string;\n  }>\n> = ({ id, theme, isCollapsed, tooltipChildren, children: wrapperChildren, ...props }) => (\n  <li {...props}>\n    {isCollapsed ? (\n      <Tooltip\n        content={\n          <Children id={id} theme={theme}>\n            {tooltipChildren}\n          </Children>\n        }\n        placement=\"right\"\n      >\n        {wrapperChildren}\n      </Tooltip>\n    ) : (\n      wrapperChildren\n    )}\n  </li>\n);\n\nconst Children: FC<PropsWithChildren<{ id: string; theme: FlowbiteSidebarItemTheme }>> = ({ id, theme, children }) => {\n  return (\n    <span\n      data-testid=\"flowbite-sidebar-item-content\"\n      id={`flowbite-sidebar-item-${id}`}\n      className={twMerge(theme.content.base)}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport const SidebarItem = forwardRef<Element, SidebarItemProps>(\n  (\n    {\n      active: isActive,\n      as: Component = \"a\",\n      children,\n      className,\n      icon: Icon,\n      label,\n      labelColor = \"info\",\n      theme: customTheme = {},\n      ...props\n    },\n    ref,\n  ) => {\n    const id = useId();\n    const { theme: rootTheme, isCollapsed } = useSidebarContext();\n    const { isInsideCollapse } = useSidebarItemContext();\n\n    const theme = mergeDeep(rootTheme.item, customTheme);\n\n    return (\n      <ListItem theme={theme} className={theme.listItem} id={id} isCollapsed={isCollapsed} tooltipChildren={children}>\n        <Component\n          aria-labelledby={`flowbite-sidebar-item-${id}`}\n          ref={ref}\n          className={twMerge(\n            theme.base,\n            isActive && theme.active,\n            !isCollapsed && isInsideCollapse && theme.collapsed?.insideCollapse,\n            className,\n          )}\n          {...props}\n        >\n          {Icon && (\n            <Icon\n              aria-hidden\n              data-testid=\"flowbite-sidebar-item-icon\"\n              className={twMerge(theme.icon?.base, isActive && theme.icon?.active)}\n            />\n          )}\n          {isCollapsed && !Icon && (\n            <span className={theme.collapsed?.noIcon}>{(children as string).charAt(0).toLocaleUpperCase() ?? \"?\"}</span>\n          )}\n          {!isCollapsed && (\n            <Children id={id} theme={theme}>\n              {children}\n            </Children>\n          )}\n          {!isCollapsed && label && (\n            <Badge color={labelColor} data-testid=\"flowbite-sidebar-label\" hidden={isCollapsed} className={theme.label}>\n              {label}\n            </Badge>\n          )}\n        </Component>\n      </ListItem>\n    );\n  },\n);\n\nSidebarItem.displayName = \"Sidebar.Item\";\n"],"mappings":";;;;;;;;;;AAWA,MAAEA,QAAO,GAAAA,CAAA;EAAAC,EAAA;EAAAC,KAAA;EAAAC,WAAA;EAAAC,eAAA;EAAAC,QAAA,EAAAC,eAAA;EAAA,GAAAC;AAAA,qBAAAC,GAAA;EAAA,GAAAD,KAAA;EAAAF,QAAA,EAAAF,WAAA,kBAAAK,GAAA,CACPC,OAAA,EACF;IACIC,OAAA,EAAS,eAASF,GAAA,CAAAG,QAAA;MAAAV,EAAA;MAAAC,KAAA;MAAAG,QAAA,EAAAD;IAAA;IAClBQ,SAAQ,EAAE;IACXP,QAAA,EAAAC;EACF,CACD,IAAAA;AAAoB,EAAE;AACtB,MAAEK,QAAA,GAAAA,CAAA;EAAAV,EAAA;EAAAC,KAA0B;EAAAG;AAAA;EAC5B,OAAI,eAAMG,GAAA,CACN,QACJ;IACM,aAAK,iCAA4B;IACjCP,EAAA,2BAAyBA,EAAA,EAAQ;IACjCY,SAAQ,EAAAC,OAAA,CAAAZ,KAAA,CAAAQ,OAAA,CAAAK,IAAA;IACTV;EACD,CACF;AACU;AACZ,MAAGW,WAAA,GAAAC,UAAA,CACH;EACIC,MAAI,EAAAC,QAAY;EAChBC,EAAA,EAAAC,SAAQ;EACRhB,QAAA;EACAQ,SAAM;EACNS,IAAA,EAAKC,IAAA;EACLC,KAAA;EACAC,UAAO,SAAW;EAClBvB,KAAG,EAAAwB,WAAK;EACT,GAAEnB;AACL,GAAIoB,GAAA,KAAQ;EACR,MAAM1B,EAAE,GAAA2B,KAAO;EACf,MAAM;IAAE1B,KAAA,EAAA2B,SAAgB;IAAE1B;EAAG,IAAA2B,iBAAwB;EACrD,MAAM;IAAAC;EAAkB,IAAAC,qBAAgB,CAAW,CAAC;EACpD,MAAA9B,KAAA,GAAA+B,SAAuB,CAAAJ,SAAI,CAAAK,IAAU,EAAER,WAAO;EAClD,OAAM,eAASlB,GAAA,CAAAR,QAAA;IAAAE,KAAA;IAAAW,SAAA,EAAAX,KAAA,CAAAiC,QAAA;IAAAlC,EAAA;IAAAE,WAAA;IAAAC,eAAA,EAAAC,QAAA;IAAAA,QAAA,iBAAA+B,IAAA,CACTf,SAAA,EACN;MACQ,iBAAG,2BAAApB,EAAA;MACH0B,GAAA;MACRd,SAAgB,EAAAC,OAAI,CACVZ,KAAA,CAAAa,IAAQ,EACRI,QAAC,IAAWjB,KAAI,CAAAgB,MAAA,EAChB,CAAAf,WAAS,IAAA4B,gBAAA,IAAA7B,KAAA,CAAAmC,SAAA,EAAAC,cAAA,EACVzB,SACD;MACA,GAAAN,KAAQ;MAChBF,QAAc,GACdkB,IAAY,IAAI,eAAAf,GAAA,CACJe,IAAA,EACZ;QACc,aAAa,EAAE;QACf,aAAW,8BAA0B;QACtCV,SAAA,EAAAC,OAAA,CAAAZ,KAAA,CAAAoB,IAAA,EAAAP,IAAA,EAAAI,QAAA,IAAAjB,KAAA,CAAAoB,IAAA,EAAAJ,MAAA;MACF,CACD,GACAf,WAAC,IAAW,CAAAoB,IAAA,mBAAwBf,GAAA,CAAQ,MAAM,EAAE;QAAAK,SAAO,EAAAX,KAAW,CAAAmC,SAAA,EAAAE,MAAA;QAAAlC,QAAA,EAAAA,QAAA,CAAAmC,MAAA,IAAAC,iBAAA;MAAA,IACtE,CAACtC,WAAW,IAAI,eAAKK,GAAA,CAAAG,QAAuB,EAAC;QAAAV,EAAK;QAAEC,KAAE;QAAKG;MAAE,IAC9D,CAAAF,WAAA,IAAAqB,KAAA,mBAAAhB,GAAA,CAAAkC,KAAA;QAAAC,KAAA,EAAAlB,UAAA;QAAA;QAAAmB,MAAA,EAAAzC,WAAA;QAAAU,SAAA,EAAAX,KAAA,CAAAsB,KAAA;QAAAnB,QAAA,EAAAmB;MAAA;IAEJ,CACF;EAAA;AACD,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}