{"ast":null,"code":"import { forwardRef, createElement } from 'react';\nconst ButtonBase = forwardRef(({\n  children,\n  as: Component,\n  href,\n  type = \"button\",\n  ...props\n}, ref) => {\n  const BaseComponent = Component || (href ? \"a\" : \"button\");\n  return createElement(BaseComponent, {\n    ref,\n    href,\n    type,\n    ...props\n  }, children);\n});\nButtonBase.displayName = \"ButtonBaseComponent\";\nexport { ButtonBase };","map":{"version":3,"names":["ButtonBase","forwardRef","children","as","Component","href","type","props","ref","BaseComponent","createElement","displayName"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\Button\\ButtonBase.tsx"],"sourcesContent":["import type { ComponentPropsWithoutRef, ElementType, ForwardedRef } from \"react\";\nimport { createElement, forwardRef } from \"react\";\n\nexport type ButtonBaseProps<T extends ElementType = \"button\"> = {\n  as?: T;\n  href?: string;\n} & ComponentPropsWithoutRef<T>;\n\nexport const ButtonBase = forwardRef(\n  <T extends ElementType = \"button\">(\n    { children, as: Component, href, type = \"button\", ...props }: ButtonBaseProps<T>,\n    ref: ForwardedRef<T>,\n  ) => {\n    const BaseComponent = Component || (href ? \"a\" : \"button\");\n\n    return createElement(BaseComponent, { ref, href, type, ...props }, children);\n  },\n);\n\nButtonBase.displayName = \"ButtonBaseComponent\";\n"],"mappings":";AAEY,MAACA,UAAU,GAAGC,UAAU,CAClC,CAAC;EAAEC,QAAQ;EAAEC,EAAE,EAAEC,SAAS;EAAEC,IAAI;EAAEC,IAAI,GAAG,QAAQ;EAAE,GAAGC;AAAK,CAAE,EAAEC,GAAG,KAAK;EACrE,MAAMC,aAAa,GAAGL,SAAS,KAAKC,IAAI,GAAG,GAAG,GAAG,QAAQ,CAAC;EAC1D,OAAOK,aAAa,CAACD,aAAa,EAAE;IAAED,GAAG;IAAEH,IAAI;IAAEC,IAAI;IAAE,GAAGC;EAAK,CAAE,EAAEL,QAAQ,CAAC;AAChF,CACA;AACAF,UAAU,CAACW,WAAW,GAAG,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}