{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useState } from 'react';\nimport { AccordionPanelContext } from './AccordionPanelContext.mjs';\nconst AccordionPanel = ({\n  children,\n  ...props\n}) => {\n  const {\n    alwaysOpen\n  } = props;\n  const [isOpen, setOpen] = useState(props.isOpen);\n  const provider = alwaysOpen ? {\n    ...props,\n    isOpen,\n    setOpen: () => setOpen(!isOpen)\n  } : props;\n  return /* @__PURE__ */jsx(AccordionPanelContext.Provider, {\n    value: provider,\n    children\n  });\n};\nexport { AccordionPanel };","map":{"version":3,"names":["AccordionPanel","children","props","alwaysOpen","isOpen","setOpen","useState","provider","jsx","AccordionPanelContext","Provider","value"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\Accordion\\AccordionPanel.tsx"],"sourcesContent":["\"use client\";\n\nimport type { FC } from \"react\";\nimport { useState } from \"react\";\nimport type { AccordionProps } from \"./Accordion\";\nimport { AccordionPanelContext } from \"./AccordionPanelContext\";\n\nexport interface AccordionPanelProps extends AccordionProps {\n  isOpen?: boolean;\n  setOpen?: () => void;\n}\n\nexport const AccordionPanel: FC<AccordionPanelProps> = ({ children, ...props }) => {\n  const { alwaysOpen } = props;\n  const [isOpen, setOpen] = useState(props.isOpen);\n\n  const provider = alwaysOpen\n    ? {\n        ...props,\n        isOpen,\n        setOpen: () => setOpen(!isOpen),\n      }\n    : props;\n\n  return <AccordionPanelContext.Provider value={provider}>{children}</AccordionPanelContext.Provider>;\n};\n"],"mappings":";;;;;AAMA,MAAEA,cAAkB,GAAEA,CAAA;EAAGC,QAAM;EAAA,GAAAC;AAAA;EAC7B,MAAM;IAACC;EAAQ,IAAQD,KAAG;EAC1B,MAAM,CAAAE,MAAA,EAAQC,OAAG,IAAAC,QAAa,CAAAJ,KAAA,CAAAE,MAAA;EAChC,MAAOG,QAAK,GAAAJ,UAAA;IACR,GAAAD,KAAM;IACNE,MAAA;IACDC,OAAQ,EAACA,CAAA,KAAAA,OAAA,EAAAD,MAAA;EACV,IAAAF,KAAA;EACF,sBAAAM,GAAA,CAAAC,qBAAA,CAAAC,QAAA;IAAAC,KAAA,EAAAJ,QAAA;IAAAN;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}