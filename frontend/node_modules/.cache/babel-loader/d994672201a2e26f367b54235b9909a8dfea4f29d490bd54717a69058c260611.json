{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useState, useMemo, Children, cloneElement } from 'react';\nimport { HiChevronDown } from 'react-icons/hi';\nimport { twMerge } from 'tailwind-merge';\nimport { mergeDeep } from '../../helpers/merge-deep.mjs';\nimport { getTheme } from '../../theme-store/index.mjs';\nimport { AccordionContent } from './AccordionContent.mjs';\nimport { AccordionPanel } from './AccordionPanel.mjs';\nimport { AccordionTitle } from './AccordionTitle.mjs';\nconst AccordionComponent = ({\n  alwaysOpen = false,\n  arrowIcon = HiChevronDown,\n  children,\n  flush = false,\n  collapseAll = false,\n  className,\n  theme: customTheme = {},\n  ...props\n}) => {\n  const [isOpen, setOpen] = useState(collapseAll ? -1 : 0);\n  const panels = useMemo(() => Children.map(children, (child, i) => cloneElement(child, {\n    alwaysOpen,\n    arrowIcon,\n    flush,\n    isOpen: isOpen === i,\n    setOpen: () => setOpen(isOpen === i ? -1 : i)\n  })), [alwaysOpen, arrowIcon, children, flush, isOpen]);\n  const theme = mergeDeep(getTheme().accordion.root, customTheme);\n  return /* @__PURE__ */jsx(\"div\", {\n    className: twMerge(theme.base, theme.flush[flush ? \"on\" : \"off\"], className),\n    \"data-testid\": \"flowbite-accordion\",\n    ...props,\n    children: panels\n  });\n};\nAccordionComponent.displayName = \"Accordion\";\nAccordionPanel.displayName = \"Accordion.Panel\";\nAccordionTitle.displayName = \"Accordion.Title\";\nAccordionContent.displayName = \"Accordion.Content\";\nconst Accordion = Object.assign(AccordionComponent, {\n  Panel: AccordionPanel,\n  Title: AccordionTitle,\n  Content: AccordionContent\n});\nexport { Accordion };","map":{"version":3,"names":["AccordionComponent","alwaysOpen","arrowIcon","HiChevronDown","children","flush","collapseAll","className","theme","customTheme","props","isOpen","setOpen","useState","panels","useMemo","Children","map","child","i","cloneElement","mergeDeep","getTheme","accordion","root","jsx","twMerge","base","displayName","AccordionPanel","AccordionTitle","AccordionContent","Accordion","Object","assign","Panel","Title","Content"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\Accordion\\Accordion.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps, FC, ReactElement } from \"react\";\nimport { Children, cloneElement, useMemo, useState } from \"react\";\nimport { HiChevronDown } from \"react-icons/hi\";\nimport { twMerge } from \"tailwind-merge\";\nimport { mergeDeep } from \"../../helpers/merge-deep\";\nimport { getTheme } from \"../../theme-store\";\nimport type { DeepPartial } from \"../../types\";\nimport type { FlowbiteBoolean } from \"../Flowbite\";\nimport type { FlowbiteAccordionComponentTheme } from \"./AccordionContent\";\nimport { AccordionContent } from \"./AccordionContent\";\nimport type { AccordionPanelProps } from \"./AccordionPanel\";\nimport { AccordionPanel } from \"./AccordionPanel\";\nimport type { FlowbiteAccordionTitleTheme } from \"./AccordionTitle\";\nimport { AccordionTitle } from \"./AccordionTitle\";\n\nexport interface FlowbiteAccordionTheme {\n  root: FlowbiteAccordionRootTheme;\n  content: FlowbiteAccordionComponentTheme;\n  title: FlowbiteAccordionTitleTheme;\n}\n\nexport interface FlowbiteAccordionRootTheme {\n  base: string;\n  flush: FlowbiteBoolean;\n}\n\nexport interface AccordionProps extends ComponentProps<\"div\"> {\n  alwaysOpen?: boolean;\n  arrowIcon?: FC<ComponentProps<\"svg\">>;\n  children: ReactElement<AccordionPanelProps> | ReactElement<AccordionPanelProps>[];\n  flush?: boolean;\n  collapseAll?: boolean;\n  theme?: DeepPartial<FlowbiteAccordionTheme>;\n}\n\nconst AccordionComponent: FC<AccordionProps> = ({\n  alwaysOpen = false,\n  arrowIcon = HiChevronDown,\n  children,\n  flush = false,\n  collapseAll = false,\n  className,\n  theme: customTheme = {},\n  ...props\n}) => {\n  const [isOpen, setOpen] = useState(collapseAll ? -1 : 0);\n\n  const panels = useMemo(\n    () =>\n      Children.map(children, (child, i) =>\n        cloneElement(child, {\n          alwaysOpen,\n          arrowIcon,\n          flush,\n          isOpen: isOpen === i,\n          setOpen: () => setOpen(isOpen === i ? -1 : i),\n        }),\n      ),\n    [alwaysOpen, arrowIcon, children, flush, isOpen],\n  );\n\n  const theme = mergeDeep(getTheme().accordion.root, customTheme);\n\n  return (\n    <div\n      className={twMerge(theme.base, theme.flush[flush ? \"on\" : \"off\"], className)}\n      data-testid=\"flowbite-accordion\"\n      {...props}\n    >\n      {panels}\n    </div>\n  );\n};\n\nAccordionComponent.displayName = \"Accordion\";\nAccordionPanel.displayName = \"Accordion.Panel\";\nAccordionTitle.displayName = \"Accordion.Title\";\nAccordionContent.displayName = \"Accordion.Content\";\n\nexport const Accordion = Object.assign(AccordionComponent, {\n  Panel: AccordionPanel,\n  Title: AccordionTitle,\n  Content: AccordionContent,\n});\n"],"mappings":";;;;;;;;;;;AAYA,MAAEA,kBAAkB,GAAAA,CAAA;EAClBC,UAAS,GAAG;EACZC,SAAQ,GAAAC,aAAA;EACRC,QAAQ;EACRC,KAAA,QAAW;EACXC,WAAS;EACTC,SAAO;EACPC,KAAG,EAAAC,WAAK;EACT,GAAAC;AACD,MAAE;EACA,MAAM,CAAAC,MAAM,EAAGC,OAAO,IAAAC,QAAA,CAAAP,WAAA;EACxB,MAAIQ,MAAM,GAAAC,OAAY,CACtB,MAAMC,QAAQ,CAAAC,GAAA,CACRb,QAAQ,EACd,CAAAc,KAAQ,EAAAC,CAAA,KAAUC,YAAA,CAAAF,KAAA;IACVjB,UAAS;IACTC,SAAK;IACLG,KAAA;IACAM,MAAA,EAAOA,MAAE,KAAMQ,CAAA;IACfP,OAAA,EAAAA,CAAA,KAAAA,OAAA,CAAAD,MAAA,KAAAQ,CAAA,QAAAA,CAAA;EACH,EACD,CAAC,EACD,CAAAlB,UAAA,EAAAC,SAAA,EAAAE,QAAA,EAAAC,KAAA,EAAAM,MAAA,CACF;EACA,MAAAH,KAAA,GAAAa,SAAuB,CAAAC,QAAG,GAAAC,SAAA,CAAAC,IAAA,EAAAf,WAAA;EAC5B,OAAS,eAAAgB,GAAA,CACL,OACJ;IACMlB,SAAA,EAAAmB,OAAe,CAAAlB,KAAA,CAAAmB,IAAA,EAAAnB,KAAoB,CAAAH,KAAA,CAAAA,KAAA,kBAAAE,SAAA;IACnC,aAAQ;IACR,GAAAG,KAAQ;IACTN,QAAA,EAAAU;EACD,CACF;AACF;AACAd,kBAAe,CAAA4B,WAAc;AAC7BC,cAAc,CAACD,WAAW,GAAG,iBAAiB;AAC9CE,cAAA,CAAAF,WAAiB,GAAW,iBAAG;AACnBG,gBAAU,CAAAH,WAAU,GAAM,mBAAmB;AACzD,MAAEI,SAAO,GAAAC,MAAc,CAAAC,MAAA,CAAAlC,kBAAA;EACrBmC,KAAK,EAAEN,cAAc;EACrBO,KAAA,EAAON,cAAE;EACVO,OAAA,EAAAN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}