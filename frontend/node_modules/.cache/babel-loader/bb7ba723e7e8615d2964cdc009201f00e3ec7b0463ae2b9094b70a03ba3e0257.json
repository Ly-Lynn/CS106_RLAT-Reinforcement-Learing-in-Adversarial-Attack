{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useFloating, useMergeRefs, useClick, useDismiss, useRole, useInteractions, FloatingPortal, FloatingOverlay, FloatingFocusManager } from '@floating-ui/react';\nimport { forwardRef, useState } from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport { mergeDeep } from '../../helpers/merge-deep.mjs';\nimport { getTheme } from '../../theme-store/index.mjs';\nimport { ModalBody } from './ModalBody.mjs';\nimport { ModalContext } from './ModalContext.mjs';\nimport { ModalFooter } from './ModalFooter.mjs';\nimport { ModalHeader } from './ModalHeader.mjs';\nconst ModalComponent = forwardRef((_ref, theirRef) => {\n  let {\n    children,\n    className,\n    dismissible = false,\n    onClose,\n    popup,\n    position = \"center\",\n    root,\n    show,\n    size = \"2xl\",\n    theme: customTheme = {},\n    initialFocus,\n    ...props\n  } = _ref;\n  const [headerId, setHeaderId] = useState(void 0);\n  const theme = mergeDeep(getTheme().modal, customTheme);\n  const {\n    context\n  } = useFloating({\n    open: show,\n    onOpenChange: () => onClose && onClose()\n  });\n  const ref = useMergeRefs([context.refs.setFloating, theirRef]);\n  const click = useClick(context);\n  const dismiss = useDismiss(context, {\n    outsidePressEvent: \"mousedown\",\n    enabled: dismissible\n  });\n  const role = useRole(context);\n  const {\n    getFloatingProps\n  } = useInteractions([click, dismiss, role]);\n  if (!show) {\n    return null;\n  }\n  return /* @__PURE__ */jsx(ModalContext.Provider, {\n    value: {\n      theme,\n      popup,\n      onClose,\n      setHeaderId\n    },\n    children: /* @__PURE__ */jsx(FloatingPortal, {\n      root,\n      children: /* @__PURE__ */jsx(FloatingOverlay, {\n        lockScroll: true,\n        \"data-testid\": \"modal-overlay\",\n        className: twMerge(theme.root.base, theme.root.positions[position], show ? theme.root.show.on : theme.root.show.off, className),\n        ...props,\n        children: /* @__PURE__ */jsx(FloatingFocusManager, {\n          context,\n          initialFocus,\n          children: /* @__PURE__ */jsx(\"div\", {\n            ref,\n            ...getFloatingProps(props),\n            \"aria-labelledby\": headerId,\n            className: twMerge(theme.content.base, theme.root.sizes[size]),\n            children: /* @__PURE__ */jsx(\"div\", {\n              className: theme.content.inner,\n              children\n            })\n          })\n        })\n      })\n    })\n  });\n});\nModalComponent.displayName = \"Modal\";\nModalHeader.displayName = \"Modal.Header\";\nModalBody.displayName = \"Modal.Body\";\nModalFooter.displayName = \"Modal.Footer\";\nconst Modal = Object.assign(ModalComponent, {\n  Header: ModalHeader,\n  Body: ModalBody,\n  Footer: ModalFooter\n});\nexport { Modal };","map":{"version":3,"names":["ModalComponent","forwardRef","_ref","theirRef","children","className","dismissible","onClose","popup","position","root","show","size","theme","customTheme","initialFocus","props","headerId","setHeaderId","useState","mergeDeep","getTheme","modal","context","useFloating","open","onOpenChange","ref","useMergeRefs","refs","setFloating","click","useClick","dismiss","useDismiss","outsidePressEvent","enabled","role","useRole","getFloatingProps","useInteractions","jsx","ModalContext","Provider","value","FloatingPortal","FloatingOverlay","lockScroll","twMerge","base","positions","on","off","FloatingFocusManager","content","sizes","inner","displayName","ModalHeader","ModalBody","ModalFooter","Modal","Object","assign","Header","Body","Footer"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\Modal\\Modal.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n  FloatingFocusManager,\n  FloatingOverlay,\n  FloatingPortal,\n  useClick,\n  useDismiss,\n  useFloating,\n  useInteractions,\n  useMergeRefs,\n  useRole,\n} from \"@floating-ui/react\";\nimport type { MutableRefObject } from \"react\";\nimport { forwardRef, useState, type ComponentPropsWithoutRef } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport { mergeDeep } from \"../../helpers/merge-deep\";\nimport { getTheme } from \"../../theme-store\";\nimport type { DeepPartial } from \"../../types\";\nimport type { FlowbiteBoolean, FlowbitePositions, FlowbiteSizes } from \"../Flowbite\";\nimport type { FlowbiteModalBodyTheme } from \"./ModalBody\";\nimport { ModalBody } from \"./ModalBody\";\nimport { ModalContext } from \"./ModalContext\";\nimport type { FlowbiteModalFooterTheme } from \"./ModalFooter\";\nimport { ModalFooter } from \"./ModalFooter\";\nimport type { FlowbiteModalHeaderTheme } from \"./ModalHeader\";\nimport { ModalHeader } from \"./ModalHeader\";\n\nexport interface FlowbiteModalTheme {\n  root: FlowbiteModalRootTheme;\n  content: FlowbiteModalContentTheme;\n  body: FlowbiteModalBodyTheme;\n  header: FlowbiteModalHeaderTheme;\n  footer: FlowbiteModalFooterTheme;\n}\n\nexport interface FlowbiteModalRootTheme {\n  base: string;\n  show: FlowbiteBoolean;\n  sizes: ModalSizes;\n  positions: ModalPositions;\n}\n\nexport interface FlowbiteModalContentTheme {\n  base: string;\n  inner: string;\n}\n\nexport interface ModalPositions extends FlowbitePositions {\n  [key: string]: string;\n}\n\nexport interface ModalSizes extends Omit<FlowbiteSizes, \"xs\"> {\n  [key: string]: string;\n}\n\nexport interface ModalProps extends ComponentPropsWithoutRef<\"div\"> {\n  onClose?: () => void;\n  position?: keyof ModalPositions;\n  popup?: boolean;\n  root?: HTMLElement;\n  show?: boolean;\n  size?: keyof ModalSizes;\n  dismissible?: boolean;\n  theme?: DeepPartial<FlowbiteModalTheme>;\n  initialFocus?: number | MutableRefObject<HTMLElement | null>;\n}\n\nconst ModalComponent = forwardRef<HTMLDivElement, ModalProps>(\n  (\n    {\n      children,\n      className,\n      dismissible = false,\n      onClose,\n      popup,\n      position = \"center\",\n      root,\n      show,\n      size = \"2xl\",\n      theme: customTheme = {},\n      initialFocus,\n      ...props\n    },\n    theirRef,\n  ) => {\n    const [headerId, setHeaderId] = useState<string | undefined>(undefined);\n    const theme = mergeDeep(getTheme().modal, customTheme);\n\n    const { context } = useFloating({\n      open: show,\n      onOpenChange: () => onClose && onClose(),\n    });\n\n    const ref = useMergeRefs([context.refs.setFloating, theirRef]);\n\n    const click = useClick(context);\n    const dismiss = useDismiss(context, { outsidePressEvent: \"mousedown\", enabled: dismissible });\n    const role = useRole(context);\n\n    const { getFloatingProps } = useInteractions([click, dismiss, role]);\n\n    if (!show) {\n      return null;\n    }\n\n    return (\n      <ModalContext.Provider value={{ theme, popup, onClose, setHeaderId }}>\n        <FloatingPortal root={root}>\n          <FloatingOverlay\n            lockScroll\n            data-testid=\"modal-overlay\"\n            className={twMerge(\n              theme.root.base,\n              theme.root.positions[position],\n              show ? theme.root.show.on : theme.root.show.off,\n              className,\n            )}\n            {...props}\n          >\n            <FloatingFocusManager context={context} initialFocus={initialFocus}>\n              <div\n                ref={ref}\n                {...getFloatingProps(props)}\n                aria-labelledby={headerId}\n                className={twMerge(theme.content.base, theme.root.sizes[size])}\n              >\n                <div className={theme.content.inner}>{children}</div>\n              </div>\n            </FloatingFocusManager>\n          </FloatingOverlay>\n        </FloatingPortal>\n      </ModalContext.Provider>\n    );\n  },\n);\n\nModalComponent.displayName = \"Modal\";\nModalHeader.displayName = \"Modal.Header\";\nModalBody.displayName = \"Modal.Body\";\nModalFooter.displayName = \"Modal.Footer\";\n\nexport const Modal = Object.assign(ModalComponent, {\n  Header: ModalHeader,\n  Body: ModalBody,\n  Footer: ModalFooter,\n});\n"],"mappings":";;;;;;;;;;;;AAuBA,MAAGA,cAAA,GAAAC,UAAA,CACH,CAAAC,IAAA,EAaIC,QAAO;EAAA,IAbX;IACIC,QAAA;IACAC,SAAA;IACAC,WAAO;IACPC,OAAK;IACLC,KAAA;IACAC,QAAI;IACJC,IAAI;IACJC,IAAI;IACJC,IAAA,GAAO;IACPC,KAAA,EAAAC,WAAY;IACZC,YAAQ;IACT,GAAEC;EACL,IAAAd,IAAA;EACI,MAAM,CAAAe,QAAQ,EAAAC,WAAU,IAAQC,QAAQ,MAAE;EAC1C,MAAMN,KAAE,GAAAO,SAAY,CAAAC,QAAY,GAAAC,KAAA,EAAAR,WAAA;EACpC,MAAU;IAAES;EAAI,IAAAC,WAAA;IACVC,IAAA,EAAAd,IAAA;IACAe,YAAC,EAAAA,CAAA,KAAAnB,OAAA,IAAAA,OAAA;EACH;EACA,MAAMoB,GAAA,GAAKC,YAAY,EAAAL,OAAS,CAAAM,IAAA,CAAAC,WAAA,EAAA3B,QAAA;EAChC,MAAM4B,KAAA,GAAOC,QAAG,CAAAT,OAAW;EAC3B,MAAMU,OAAO,GAAAC,UAAQ,CAAAX,OAAS;IAAAY,iBAAA;IAAAC,OAAA,EAAA9B;EAAA;EAC9B,MAAM+B,IAAE,GAAAC,OAAA,CAAAf,OAAkB,CAAG;EAC7B,MAAK;IAAAgB;EAAM,IAAAC,eAAA,EAAAT,KAAA,EAAAE,OAAA,EAAAI,IAAA;EACf,IAAM,CAAA1B,IAAO;IACR;EACD;EACJ,OAAM,eAAe8B,GAAA,CAAAC,YAAA,CAAAC,QAAA;IAAAC,KAAA;MAAA/B,KAAA;MAAAL,KAAA;MAAAD,OAAA;MAAAW;IAAA;IAAAd,QAAA,iBAAAqC,GAAA,CAAAI,cAAA;MAAAnC,IAAA;MAAAN,QAAA,iBAAAqC,GAAA,CACfK,eAAA,EACN;QACQC,UAAA,MAAe;QACf,aAAW,iBAAO;QAC1B1C,SAAgB,EAAA2C,OAAS,CACfnC,KAAK,CAACH,IAAI,CAACuC,IAAA,EACXpC,KAAI,CAAAH,IAAG,CAAAwC,SAAW,CAAAzC,QAAU,GAC5BE,IAAA,GAAAE,KAAS,CAAAH,IAAA,CAAAC,IAAA,CAAAwC,EAAA,GAAAtC,KAAA,CAAAH,IAAA,CAAAC,IAAA,CAAAyC,GAAA,EACV/C,SACD;QACA,GAAAW,KAAQ;QAChBZ,QAAe,iBAAAqC,GAAA,CAAAY,oBAAA;UAAA9B,OAAA;UAAAR,YAAA;UAAAX,QAAA,iBAAAqC,GAAA,CACL,OACV;YACYd,GAAG;YACH,GAAAY,gBAAmB,CAAAvB,KAAA;YACnB,iBAAW,EAAQC,QAAM;YACzBZ,SAAQ,EAAA2C,OAAA,CAAAnC,KAAA,CAAAyC,OAAsB,CAAAL,IAAO,EAAEpC,KAAA,CAAAH,IAAS,CAAE6C,KAAK,CAAC3C,IAAA;YACzDR,QAAA,iBAAAqC,GAAA;cAAApC,SAAA,EAAAQ,KAAA,CAAAyC,OAAA,CAAAE,KAAA;cAAApD;YAAA;UACF,CACF;QAAA;MACF,CACF;IAAA;EAAA;AACD,CACF;AACAJ,cAAY,CAAAyD,WAAc;AAC1BC,WAAU,CAAAD,WAAW,GAAG,cAAa;AACrCE,SAAA,CAAAF,WAAY,GAAW,YAAG;AACdG,WAAM,CAAAH,WAAU,iBAAO;AACnC,MAAEI,KAAQ,GAAAC,MAAA,CAAWC,MAAA,CAAA/D,cAAA;EACnBgE,MAAM,EAAAN,WAAS;EACfO,IAAA,EAAMN,SAAE;EACTO,MAAA,EAAAN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}