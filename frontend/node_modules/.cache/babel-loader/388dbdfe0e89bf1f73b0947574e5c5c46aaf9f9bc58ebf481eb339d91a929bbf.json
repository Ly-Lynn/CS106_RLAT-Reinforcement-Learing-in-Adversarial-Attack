{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useState, useId, useRef, useEffect } from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport { mergeDeep } from '../../helpers/merge-deep.mjs';\nimport { getTheme } from '../../theme-store/index.mjs';\nimport { Dropdown } from '../Dropdown/Dropdown.mjs';\nimport '../Dropdown/DropdownContext.mjs';\nimport '../Dropdown/DropdownItem.mjs';\nconst MegaMenuDropdown = _ref => {\n  let {\n    children,\n    className,\n    theme: customTheme = {},\n    toggle,\n    ...props\n  } = _ref;\n  const [labelledBy, setLabelledBy] = useState(void 0);\n  const theme = mergeDeep(getTheme().megaMenu.dropdown, customTheme);\n  if (toggle) {\n    return /* @__PURE__ */jsx(Dropdown, {\n      inline: true,\n      label: toggle,\n      placement: \"bottom\",\n      theme: theme.toggle,\n      className: twMerge(theme.base, className),\n      children\n    });\n  }\n  const id = useId();\n  const ref = useRef(null);\n  useEffect(() => {\n    var _findToggle;\n    const findToggle = function () {\n      var _ref$current;\n      const megaMenu = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.closest(\"nav\");\n      return megaMenu === null || megaMenu === void 0 ? void 0 : megaMenu.querySelector('[aria-haspopup=\"menu\"]');\n    };\n    setLabelledBy((_findToggle = findToggle()) === null || _findToggle === void 0 ? void 0 : _findToggle.id);\n  }, []);\n  return /* @__PURE__ */jsx(\"div\", {\n    \"aria-labelledby\": labelledBy,\n    id,\n    ref,\n    role: \"menu\",\n    className: twMerge(theme.base, className),\n    ...props,\n    children\n  });\n};\nMegaMenuDropdown.displayName = \"MegaMenu.Dropdown\";\nexport { MegaMenuDropdown };","map":{"version":3,"names":["MegaMenuDropdown","_ref","children","className","theme","customTheme","toggle","props","labelledBy","setLabelledBy","useState","mergeDeep","getTheme","megaMenu","dropdown","jsx","Dropdown","inline","label","placement","twMerge","base","id","useId","ref","useRef","useEffect","_findToggle","findToggle","_ref$current","current","closest","querySelector","role"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\MegaMenu\\MegaMenuDropdown.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useId, useRef, useState, type ComponentProps, type FC } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport { mergeDeep } from \"../../helpers/merge-deep\";\nimport { getTheme } from \"../../theme-store\";\nimport { Dropdown, FlowbiteDropdownTheme } from \"../Dropdown\";\n\nexport interface FlowbiteMegaMenuDropdownTheme {\n  base: string;\n  toggle: FlowbiteDropdownTheme;\n}\n\nexport interface MegaMenuDropdownProps extends ComponentProps<\"div\"> {\n  theme?: FlowbiteMegaMenuDropdownTheme;\n  toggle?: JSX.Element;\n}\n\nexport const MegaMenuDropdown: FC<MegaMenuDropdownProps> = ({\n  children,\n  className,\n  theme: customTheme = {},\n  toggle,\n  ...props\n}) => {\n  const [labelledBy, setLabelledBy] = useState<string | undefined>(undefined);\n\n  const theme = mergeDeep(getTheme().megaMenu.dropdown, customTheme);\n\n  if (toggle) {\n    return (\n      <Dropdown\n        inline\n        label={toggle}\n        placement=\"bottom\"\n        theme={theme.toggle}\n        className={twMerge(theme.base, className)}\n      >\n        {children}\n      </Dropdown>\n    );\n  }\n\n  const id = useId();\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const findToggle = function () {\n      const megaMenu = ref.current?.closest(\"nav\");\n\n      return megaMenu?.querySelector('[aria-haspopup=\"menu\"]');\n    };\n\n    setLabelledBy(findToggle()?.id);\n  }, []);\n\n  return (\n    <div\n      aria-labelledby={labelledBy}\n      id={id}\n      ref={ref}\n      role=\"menu\"\n      className={twMerge(theme.base, className)}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nMegaMenuDropdown.displayName = \"MegaMenu.Dropdown\";\n"],"mappings":";;;;;;;;;;AASA,MAAEA,gBAAQ,GAAAC,IAAA,IAMR;EAAA,IANQ;IACRC,QAAA;IACAC,SAAO;IACPC,KAAA,EAAMC,WAAA;IACNC,MAAG;IACJ,GAAAC;EACD,IAAAN,IAAA;EACE,MAAM,CAAAO,UAAQ,EAAAC,aAAkB,IAAGC,QAAS,QAAQ;EACpD,MAAIN,KAAM,GAAEO,SAAA,CAAAC,QAAA,GAAAC,QAAA,CAAAC,QAAA,EAAAT,WAAA;EACd,IAAIC,MAAA;IACJ,OAAM,eAAQS,GAAA,CACRC,QAAA,EACN;MACQC,MAAK,EAAE;MACPC,KAAA,EAAAZ,MAAW;MACXa,SAAO,UAAY;MACnBf,KAAA,EAAAA,KAAW,CAAAE,MAAQ;MACnBH,SAAQ,EAAAiB,OAAA,CAAAhB,KAAA,CAAAiB,IAAA,EAAAlB,SAAA;MACTD;IACD,CACH;EACD;EACA,MAAMoB,EAAA,GAAGC,KAAG,EAAM;EAClB,MAAAC,GAAS,GAACC,MAAM;EAClBC,SAAU;IAAA,IAAAC,WAAA;IACV,MAAMC,UAAc,GAAG,SAAAA,CAAA,EAAW;MAAA,IAAAC,YAAA;MAC5B,MAAAhB,QAAO,IAAAgB,YAAA,GAAUL,GAAA,CAAAM,OAAA,cAAAD,YAAA,uBAAAA,YAAA,CAAaE,OAAC;MAC/B,OAAAlB,QAAA,aAAAA,QAAA,uBAAAA,QAAA,CAAAmB,aAAA;IACF;IACDvB,aAAM,EAAAkB,WAAA,GAAAC,UAAA,gBAAAD,WAAA,uBAAAA,WAAA,CAAAL,EAAA;EACP;EACF,OAAS,eAAAP,GAAA,CACL,OACJ;IACM,iBAAE,EAAAP,UAAA;IACFc,EAAA;IACAE,GAAA;IACAS,IAAA,QAAW;IACX9B,SAAQ,EAAAiB,OAAA,CAAAhB,KAAA,CAAAiB,IAAA,EAAAlB,SAAA;IACR,GAAAI,KAAQ;IACTL;EACD,CACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}