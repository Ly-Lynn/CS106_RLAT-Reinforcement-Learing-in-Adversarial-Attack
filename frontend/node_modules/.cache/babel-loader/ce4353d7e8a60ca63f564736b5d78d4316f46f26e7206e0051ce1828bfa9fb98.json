{"ast":null,"code":"import { jsxs, Fragment, jsx } from 'react/jsx-runtime';\nimport { forwardRef, useId } from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport { mergeDeep } from '../../helpers/merge-deep.mjs';\nimport { getTheme } from '../../theme-store/index.mjs';\nconst ToggleSwitch = forwardRef(({\n  checked,\n  className,\n  color = \"blue\",\n  sizing = \"md\",\n  disabled,\n  label,\n  name,\n  onChange,\n  theme: customTheme = {},\n  ...props\n}, ref) => {\n  const id = useId();\n  const theme = mergeDeep(getTheme().toggleSwitch, customTheme);\n  const toggle = () => onChange(!checked);\n  const handleClick = () => {\n    toggle();\n  };\n  const handleOnKeyDown = event => {\n    if (event.code == \"Enter\") {\n      event.preventDefault();\n    }\n  };\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [name && checked ? /* @__PURE__ */jsx(\"input\", {\n      ref,\n      checked,\n      hidden: true,\n      name,\n      readOnly: true,\n      type: \"checkbox\",\n      className: \"sr-only\"\n    }) : null, /* @__PURE__ */jsxs(\"button\", {\n      \"aria-checked\": checked,\n      \"aria-labelledby\": `${id}-flowbite-toggleswitch-label`,\n      disabled,\n      id: `${id}-flowbite-toggleswitch`,\n      onClick: handleClick,\n      onKeyDown: handleOnKeyDown,\n      role: \"switch\",\n      tabIndex: 0,\n      type: \"button\",\n      className: twMerge(theme.root.base, theme.root.active[disabled ? \"off\" : \"on\"], className),\n      ...props,\n      children: [/* @__PURE__ */jsx(\"div\", {\n        \"data-testid\": \"flowbite-toggleswitch-toggle\",\n        className: twMerge(theme.toggle.base, theme.toggle.checked[checked ? \"on\" : \"off\"], checked && theme.toggle.checked.color[color], theme.toggle.sizes[sizing])\n      }), label?.length ? /* @__PURE__ */jsx(\"span\", {\n        \"data-testid\": \"flowbite-toggleswitch-label\",\n        id: `${id}-flowbite-toggleswitch-label`,\n        className: theme.root.label,\n        children: label\n      }) : null]\n    })]\n  });\n});\nToggleSwitch.displayName = \"ToggleSwitch\";\nexport { ToggleSwitch };","map":{"version":3,"names":["ToggleSwitch","forwardRef","checked","className","color","sizing","disabled","label","name","onChange","theme","customTheme","props","ref","id","useId","mergeDeep","getTheme","toggleSwitch","toggle","handleClick","handleOnKeyDown","event","code","preventDefault","jsxs","Fragment","children","jsx","hidden","readOnly","type","onClick","onKeyDown","role","tabIndex","twMerge","root","base","active","sizes","length","displayName"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\ToggleSwitch\\ToggleSwitch.tsx"],"sourcesContent":["import type { ComponentProps, KeyboardEvent } from \"react\";\nimport { forwardRef, useId } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport { mergeDeep } from \"../../helpers/merge-deep\";\nimport { getTheme } from \"../../theme-store\";\nimport type { DeepPartial } from \"../../types\";\nimport type { FlowbiteBoolean, FlowbiteColors } from \"../Flowbite\";\nimport type { FlowbiteTextInputSizes } from \"../TextInput\";\n\nexport interface FlowbiteToggleSwitchTheme {\n  root: FlowbiteToggleSwitchRootTheme;\n  toggle: FlowbiteToggleSwitchToggleTheme;\n}\n\nexport interface FlowbiteToggleSwitchRootTheme {\n  base: string;\n  active: FlowbiteBoolean;\n  label: string;\n}\n\nexport interface FlowbiteToggleSwitchToggleTheme {\n  base: string;\n  sizes: FlowbiteTextInputSizes;\n  checked: FlowbiteBoolean & {\n    color: FlowbiteColors;\n  };\n}\n\nexport type ToggleSwitchProps = Omit<ComponentProps<\"button\">, \"onChange\" | \"ref\"> & {\n  checked: boolean;\n  color?: keyof FlowbiteColors;\n  sizing?: keyof FlowbiteTextInputSizes;\n  label?: string;\n  onChange: (checked: boolean) => void;\n  theme?: DeepPartial<FlowbiteToggleSwitchTheme>;\n};\n\nexport const ToggleSwitch = forwardRef<HTMLInputElement, ToggleSwitchProps>(\n  (\n    {\n      checked,\n      className,\n      color = \"blue\",\n      sizing = \"md\",\n      disabled,\n      label,\n      name,\n      onChange,\n      theme: customTheme = {},\n      ...props\n    },\n    ref,\n  ) => {\n    const id = useId();\n    const theme = mergeDeep(getTheme().toggleSwitch, customTheme);\n\n    const toggle = (): void => onChange(!checked);\n\n    const handleClick = (): void => {\n      toggle();\n    };\n\n    const handleOnKeyDown = (event: KeyboardEvent<HTMLButtonElement>): void => {\n      if (event.code == \"Enter\") {\n        event.preventDefault();\n      }\n    };\n\n    return (\n      <>\n        {name && checked ? (\n          <input ref={ref} checked={checked} hidden name={name} readOnly type=\"checkbox\" className=\"sr-only\" />\n        ) : null}\n        <button\n          aria-checked={checked}\n          aria-labelledby={`${id}-flowbite-toggleswitch-label`}\n          disabled={disabled}\n          id={`${id}-flowbite-toggleswitch`}\n          onClick={handleClick}\n          onKeyDown={handleOnKeyDown}\n          role=\"switch\"\n          tabIndex={0}\n          type=\"button\"\n          className={twMerge(theme.root.base, theme.root.active[disabled ? \"off\" : \"on\"], className)}\n          {...props}\n        >\n          <div\n            data-testid=\"flowbite-toggleswitch-toggle\"\n            className={twMerge(\n              theme.toggle.base,\n              theme.toggle.checked[checked ? \"on\" : \"off\"],\n              checked && theme.toggle.checked.color[color],\n              theme.toggle.sizes[sizing],\n            )}\n          />\n          {label?.length ? (\n            <span\n              data-testid=\"flowbite-toggleswitch-label\"\n              id={`${id}-flowbite-toggleswitch-label`}\n              className={theme.root.label}\n            >\n              {label}\n            </span>\n          ) : null}\n        </button>\n      </>\n    );\n  },\n);\n\nToggleSwitch.displayName = \"ToggleSwitch\";\n"],"mappings":";;;;;AAMY,MAACA,YAAY,GAAGC,UAAU,CACpC,CAAC;EACCC,OAAO;EACPC,SAAS;EACTC,KAAK,GAAG,MAAM;EACdC,MAAM,GAAG,IAAI;EACbC,QAAQ;EACRC,KAAK;EACLC,IAAI;EACJC,QAAQ;EACRC,KAAK,EAAEC,WAAW,GAAG,EAAE;EACvB,GAAGC;AACP,CAAG,EAAEC,GAAG,KAAK;EACT,MAAMC,EAAE,GAAGC,KAAK,EAAE;EAClB,MAAML,KAAK,GAAGM,SAAS,CAACC,QAAQ,EAAE,CAACC,YAAY,EAAEP,WAAW,CAAC;EAC7D,MAAMQ,MAAM,GAAGA,CAAA,KAAMV,QAAQ,CAAC,CAACP,OAAO,CAAC;EACvC,MAAMkB,WAAW,GAAGA,CAAA,KAAM;IACxBD,MAAM,EAAE;EACd,CAAK;EACD,MAAME,eAAe,GAAIC,KAAK,IAAK;IACjC,IAAIA,KAAK,CAACC,IAAI,IAAI,OAAO,EAAE;MACzBD,KAAK,CAACE,cAAc,EAAE;IAC9B;EACA,CAAK;EACD,sBAAuBC,IAAI,CAACC,QAAQ,EAAE;IAAEC,QAAQ,EAAE,CAChDnB,IAAI,IAAIN,OAAO,kBAAmB0B,GAAG,CAAC,OAAO,EAAE;MAAEf,GAAG;MAAEX,OAAO;MAAE2B,MAAM,EAAE,IAAI;MAAErB,IAAI;MAAEsB,QAAQ,EAAE,IAAI;MAAEC,IAAI,EAAE,UAAU;MAAE5B,SAAS,EAAE;IAAS,CAAE,CAAC,GAAG,IAAI,EACzJ,eAAsBsB,IAAI,CAClB,QAAQ,EACR;MACE,cAAc,EAAEvB,OAAO;MACvB,iBAAiB,EAAE,GAAGY,EAAE,8BAA8B;MACtDR,QAAQ;MACRQ,EAAE,EAAE,GAAGA,EAAE,wBAAwB;MACjCkB,OAAO,EAAEZ,WAAW;MACpBa,SAAS,EAAEZ,eAAe;MAC1Ba,IAAI,EAAE,QAAQ;MACdC,QAAQ,EAAE,CAAC;MACXJ,IAAI,EAAE,QAAQ;MACd5B,SAAS,EAAEiC,OAAO,CAAC1B,KAAK,CAAC2B,IAAI,CAACC,IAAI,EAAE5B,KAAK,CAAC2B,IAAI,CAACE,MAAM,CAACjC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC,EAAEH,SAAS,CAAC;MAC1F,GAAGS,KAAK;MACRe,QAAQ,EAAE,CACpB,eAA4BC,GAAG,CACjB,KAAK,EACL;QACE,aAAa,EAAE,8BAA8B;QAC7CzB,SAAS,EAAEiC,OAAO,CAChB1B,KAAK,CAACS,MAAM,CAACmB,IAAI,EACjB5B,KAAK,CAACS,MAAM,CAACjB,OAAO,CAACA,OAAO,GAAG,IAAI,GAAG,KAAK,CAAC,EAC5CA,OAAO,IAAIQ,KAAK,CAACS,MAAM,CAACjB,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC,EAC5CM,KAAK,CAACS,MAAM,CAACqB,KAAK,CAACnC,MAAM,CAC3C;MACA,CACA,CAAa,EACDE,KAAK,EAAEkC,MAAM,kBAAmBb,GAAG,CACjC,MAAM,EACN;QACE,aAAa,EAAE,6BAA6B;QAC5Cd,EAAE,EAAE,GAAGA,EAAE,8BAA8B;QACvCX,SAAS,EAAEO,KAAK,CAAC2B,IAAI,CAAC9B,KAAK;QAC3BoB,QAAQ,EAAEpB;MAC1B,CACA,CAAa,GAAG,IAAI;IAEpB,CACA,CAAO;EACF,CAAE,CAAC;AACR,CACA;AACAP,YAAY,CAAC0C,WAAW,GAAG,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}