{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useState } from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport { mergeDeep } from '../../helpers/merge-deep.mjs';\nimport { getTheme } from '../../theme-store/index.mjs';\nimport { NavbarBrand } from './NavbarBrand.mjs';\nimport { NavbarCollapse } from './NavbarCollapse.mjs';\nimport { NavbarContext } from './NavbarContext.mjs';\nimport { NavbarLink } from './NavbarLink.mjs';\nimport { NavbarToggle } from './NavbarToggle.mjs';\nconst NavbarComponent = _ref => {\n  let {\n    border,\n    children,\n    className,\n    fluid = false,\n    menuOpen,\n    rounded,\n    theme: customTheme = {},\n    ...props\n  } = _ref;\n  const [isOpen, setIsOpen] = useState(menuOpen);\n  const theme = mergeDeep(getTheme().navbar, customTheme);\n  return /* @__PURE__ */jsx(NavbarContext.Provider, {\n    value: {\n      theme,\n      isOpen,\n      setIsOpen\n    },\n    children: /* @__PURE__ */jsx(\"nav\", {\n      className: twMerge(theme.root.base, theme.root.bordered[border ? \"on\" : \"off\"], theme.root.rounded[rounded ? \"on\" : \"off\"], className),\n      ...props,\n      children: /* @__PURE__ */jsx(\"div\", {\n        className: twMerge(theme.root.inner.base, theme.root.inner.fluid[fluid ? \"on\" : \"off\"]),\n        children\n      })\n    })\n  });\n};\nNavbarComponent.displayName = \"Navbar\";\nNavbarBrand.displayName = \"Navbar.Brand\";\nNavbarCollapse.displayName = \"Navbar.Collapse\";\nNavbarLink.displayName = \"Navbar.Link\";\nNavbarToggle.displayName = \"Navbar.Toggle\";\nconst Navbar = Object.assign(NavbarComponent, {\n  Brand: NavbarBrand,\n  Collapse: NavbarCollapse,\n  Link: NavbarLink,\n  Toggle: NavbarToggle\n});\nexport { Navbar };","map":{"version":3,"names":["NavbarComponent","_ref","border","children","className","fluid","menuOpen","rounded","theme","customTheme","props","isOpen","setIsOpen","useState","mergeDeep","getTheme","navbar","jsx","NavbarContext","Provider","value","twMerge","root","base","bordered","inner","displayName","NavbarBrand","NavbarCollapse","NavbarLink","NavbarToggle","Navbar","Object","assign","Brand","Collapse","Link","Toggle"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\Navbar\\Navbar.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps, FC } from \"react\";\nimport { useState } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport { mergeDeep } from \"../../helpers/merge-deep\";\nimport { getTheme } from \"../../theme-store\";\nimport type { DeepPartial } from \"../../types\";\nimport type { FlowbiteBoolean } from \"../Flowbite\";\nimport type { FlowbiteNavbarBrandTheme } from \"./NavbarBrand\";\nimport { NavbarBrand } from \"./NavbarBrand\";\nimport type { FlowbiteNavbarCollapseTheme } from \"./NavbarCollapse\";\nimport { NavbarCollapse } from \"./NavbarCollapse\";\nimport { NavbarContext } from \"./NavbarContext\";\nimport type { FlowbiteNavbarLinkTheme } from \"./NavbarLink\";\nimport { NavbarLink } from \"./NavbarLink\";\nimport type { FlowbiteNavbarToggleTheme } from \"./NavbarToggle\";\nimport { NavbarToggle } from \"./NavbarToggle\";\n\nexport interface FlowbiteNavbarTheme {\n  root: FlowbiteNavbarRootTheme;\n  brand: FlowbiteNavbarBrandTheme;\n  collapse: FlowbiteNavbarCollapseTheme;\n  link: FlowbiteNavbarLinkTheme;\n  toggle: FlowbiteNavbarToggleTheme;\n}\n\nexport interface FlowbiteNavbarRootTheme {\n  base: string;\n  rounded: FlowbiteBoolean;\n  bordered: FlowbiteBoolean;\n  inner: {\n    base: string;\n    fluid: FlowbiteBoolean;\n  };\n}\n\nexport interface NavbarComponentProps extends ComponentProps<\"nav\"> {\n  menuOpen?: boolean;\n  fluid?: boolean;\n  rounded?: boolean;\n  border?: boolean;\n  theme?: DeepPartial<FlowbiteNavbarTheme>;\n}\n\nconst NavbarComponent: FC<NavbarComponentProps> = ({\n  border,\n  children,\n  className,\n  fluid = false,\n  menuOpen,\n  rounded,\n  theme: customTheme = {},\n  ...props\n}) => {\n  const [isOpen, setIsOpen] = useState(menuOpen);\n\n  const theme = mergeDeep(getTheme().navbar, customTheme);\n\n  return (\n    <NavbarContext.Provider value={{ theme, isOpen, setIsOpen }}>\n      <nav\n        className={twMerge(\n          theme.root.base,\n          theme.root.bordered[border ? \"on\" : \"off\"],\n          theme.root.rounded[rounded ? \"on\" : \"off\"],\n          className,\n        )}\n        {...props}\n      >\n        <div className={twMerge(theme.root.inner.base, theme.root.inner.fluid[fluid ? \"on\" : \"off\"])}>{children}</div>\n      </nav>\n    </NavbarContext.Provider>\n  );\n};\n\nNavbarComponent.displayName = \"Navbar\";\nNavbarBrand.displayName = \"Navbar.Brand\";\nNavbarCollapse.displayName = \"Navbar.Collapse\";\nNavbarLink.displayName = \"Navbar.Link\";\nNavbarToggle.displayName = \"Navbar.Toggle\";\n\nexport const Navbar = Object.assign(NavbarComponent, {\n  Brand: NavbarBrand,\n  Collapse: NavbarCollapse,\n  Link: NavbarLink,\n  Toggle: NavbarToggle,\n});\n"],"mappings":";;;;;;;;;;;;AAaA,MAAEA,eAAM,GAAAC,IAAA,IASN;EAAA,IATM;IACNC,MAAA;IACAC,QAAA;IACAC,SAAQ;IACRC,KAAA,GAAQ;IACRC,QAAO;IACPC,OAAO;IACPC,KAAG,EAAAC,WAAK;IACT,GAAAC;EACD,IAAAT,IAAA;EACE,MAAM,CAAAU,MAAK,EAAGC,SAAU,IAAAC,QAAW,CAAAP,QAAQ;EAC3C,MAAAE,KAAA,GAAAM,SAAuB,CAAAC,QAAI,GAAAC,MAAc,EAAAP,WAAY;EACvD,OAAS,eAAAQ,GAAA,CAAAC,aAAA,CAAAC,QAAA;IAAAC,KAAA;MAAAZ,KAAA;MAAAG,MAAA;MAAAC;IAAA;IAAAT,QAAA,iBAAAc,GAAA,CACL,OACJ;MACAb,SAAc,EAAAiB,OAAS,CACfb,KAAK,CAACc,IAAI,CAACC,IAAA,EACXf,KAAK,CAACc,IAAI,CAACE,QAAQ,CAAAtB,MAAO,GAAG,IAAI,GAAG,KAAK,CAAC,EAC1CM,KAAA,CAAAc,IAAS,CAAAf,OAAA,CAAAA,OAAA,kBACVH,SACD;MACA,GAAAM,KAAQ;MACTP,QAAA,iBAAAc,GAAA;QAAAb,SAAA,EAAAiB,OAAA,CAAAb,KAAA,CAAAc,IAAA,CAAAG,KAAA,CAAAF,IAAA,EAAAf,KAAA,CAAAc,IAAA,CAAAG,KAAA,CAAApB,KAAA,CAAAA,KAAA;QAAAF;MAAA;IACF,CACD;EAAA;AACF;AACAH,eAAY,CAAA0B,WAAc;AAC1BC,WAAA,CAAAD,WAAe,GAAW,cAAG;AAC7BE,cAAW,CAAAF,WAAc,oBAAc;AACvCG,UAAA,CAAAH,WAAa,GAAW,aAAG;AACfI,YAAO,CAAAJ,WAAU,kBAAO;AACpC,MAAEK,MAAO,GAAAC,MAAW,CAAAC,MAAA,CAAAjC,eAAA;EAClBkC,KAAA,EAAAP,WAAU;EACVQ,QAAM,EAAAP,cAAU;EAChBQ,IAAA,EAAMP,UAAE;EACTQ,MAAA,EAAAP","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}