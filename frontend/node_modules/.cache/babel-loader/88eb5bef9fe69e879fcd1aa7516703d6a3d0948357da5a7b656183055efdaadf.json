{"ast":null,"code":"var Views = /* @__PURE__ */(Views2 => {\n  Views2[Views2[\"Days\"] = 0] = \"Days\";\n  Views2[Views2[\"Months\"] = 1] = \"Months\";\n  Views2[Views2[\"Years\"] = 2] = \"Years\";\n  Views2[Views2[\"Decades\"] = 3] = \"Decades\";\n  return Views2;\n})(Views || {});\nvar WeekStart = /* @__PURE__ */(WeekStart2 => {\n  WeekStart2[WeekStart2[\"Sunday\"] = 0] = \"Sunday\";\n  WeekStart2[WeekStart2[\"Monday\"] = 1] = \"Monday\";\n  WeekStart2[WeekStart2[\"Tuesday\"] = 2] = \"Tuesday\";\n  WeekStart2[WeekStart2[\"Wednesday\"] = 3] = \"Wednesday\";\n  WeekStart2[WeekStart2[\"Thursday\"] = 4] = \"Thursday\";\n  WeekStart2[WeekStart2[\"Friday\"] = 5] = \"Friday\";\n  WeekStart2[WeekStart2[\"Saturday\"] = 6] = \"Saturday\";\n  return WeekStart2;\n})(WeekStart || {});\nconst isDateInRange = (date, minDate, maxDate) => {\n  const dateTime = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();\n  if (minDate && maxDate) {\n    const minDateTime = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate()).getTime();\n    const maxDateTime = new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate()).getTime();\n    return dateTime >= minDateTime && dateTime <= maxDateTime;\n  }\n  if (minDate) {\n    const minDateTime = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate()).getTime();\n    return dateTime >= minDateTime;\n  }\n  if (maxDate) {\n    const maxDateTime = new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate()).getTime();\n    return dateTime <= maxDateTime;\n  }\n  return true;\n};\nconst isDateEqual = (date, selectedDate) => {\n  date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n  selectedDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  return date.getTime() === selectedDate.getTime();\n};\nconst getFirstDateInRange = (date, minDate, maxDate) => {\n  if (!isDateInRange(date, minDate, maxDate)) {\n    if (minDate && date < minDate) {\n      date = minDate;\n    } else if (maxDate && date > maxDate) {\n      date = maxDate;\n    }\n  }\n  return date;\n};\nconst getFirstDayOfTheMonth = (date, weekStart) => {\n  const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\n  const dayOfWeek = firstDayOfMonth.getDay();\n  let diff = dayOfWeek - weekStart;\n  if (diff < 0) {\n    diff += 7;\n  }\n  return addDays(firstDayOfMonth, -diff);\n};\nconst getWeekDays = (lang, weekStart) => {\n  const weekdays = [];\n  const date = /* @__PURE__ */new Date(0);\n  date.setDate(date.getDate() - date.getDay() + weekStart);\n  const formatter = new Intl.DateTimeFormat(lang, {\n    weekday: \"short\"\n  });\n  for (let i = 0; i < 7; i++) {\n    weekdays.push(formatter.format(addDays(date, i)));\n  }\n  return weekdays;\n};\nconst addDays = (date, amount) => {\n  const newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + amount);\n  return newDate;\n};\nconst addMonths = (date, amount) => {\n  const newDate = new Date(date);\n  newDate.setMonth(newDate.getMonth() + amount);\n  return newDate;\n};\nconst addYears = (date, amount) => {\n  const newDate = new Date(date);\n  newDate.setFullYear(newDate.getFullYear() + amount);\n  return newDate;\n};\nconst getFormattedDate = (language, date, options) => {\n  let defaultOptions = {\n    day: \"numeric\",\n    month: \"long\",\n    year: \"numeric\"\n  };\n  if (options) {\n    defaultOptions = options;\n  }\n  return new Intl.DateTimeFormat(language, defaultOptions).format(date);\n};\nconst startOfYearPeriod = (date, years) => {\n  const year = date.getFullYear();\n  return Math.floor(year / years) * years;\n};\nconst isDateInDecade = (date, startYear) => {\n  const year = date.getFullYear();\n  const endYear = startYear + 9;\n  return year >= startYear && year <= endYear;\n};\nexport { Views, WeekStart, addDays, addMonths, addYears, getFirstDateInRange, getFirstDayOfTheMonth, getFormattedDate, getWeekDays, isDateEqual, isDateInDecade, isDateInRange, startOfYearPeriod };","map":{"version":3,"names":["Views","Views2","WeekStart","WeekStart2","isDateInRange","date","minDate","maxDate","dateTime","Date","getFullYear","getMonth","getDate","getTime","minDateTime","maxDateTime","isDateEqual","selectedDate","getFirstDateInRange","getFirstDayOfTheMonth","weekStart","firstDayOfMonth","dayOfWeek","getDay","diff","addDays","getWeekDays","lang","weekdays","setDate","formatter","Intl","DateTimeFormat","weekday","i","push","format","amount","newDate","addMonths","setMonth","addYears","setFullYear","getFormattedDate","language","options","defaultOptions","day","month","year","startOfYearPeriod","years","Math","floor","isDateInDecade","startYear","endYear"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\Datepicker\\helpers.ts"],"sourcesContent":["export enum Views {\n  Days = 0,\n  Months = 1,\n  Years = 2,\n  Decades = 3,\n}\n\nexport enum WeekStart {\n  Sunday = 0,\n  Monday = 1,\n  Tuesday = 2,\n  Wednesday = 3,\n  Thursday = 4,\n  Friday = 5,\n  Saturday = 6,\n}\n\nexport const isDateInRange = (date: Date, minDate?: Date, maxDate?: Date): boolean => {\n  const dateTime = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();\n\n  if (minDate && maxDate) {\n    const minDateTime = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate()).getTime();\n    const maxDateTime = new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate()).getTime();\n    return dateTime >= minDateTime && dateTime <= maxDateTime;\n  }\n\n  if (minDate) {\n    const minDateTime = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate()).getTime();\n    return dateTime >= minDateTime;\n  }\n\n  if (maxDate) {\n    const maxDateTime = new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate()).getTime();\n    return dateTime <= maxDateTime;\n  }\n\n  return true;\n};\n\nexport const isDateEqual = (date: Date, selectedDate: Date): boolean => {\n  date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n  selectedDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n\n  return date.getTime() === selectedDate.getTime();\n};\n\nexport const getFirstDateInRange = (date: Date, minDate?: Date, maxDate?: Date): Date => {\n  if (!isDateInRange(date, minDate, maxDate)) {\n    if (minDate && date < minDate) {\n      date = minDate;\n    } else if (maxDate && date > maxDate) {\n      date = maxDate;\n    }\n  }\n  return date;\n};\n\nexport const getFirstDayOfTheMonth = (date: Date, weekStart: WeekStart): Date => {\n  const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\n  const dayOfWeek = firstDayOfMonth.getDay();\n\n  let diff = dayOfWeek - weekStart;\n  if (diff < 0) {\n    diff += 7;\n  }\n\n  return addDays(firstDayOfMonth, -diff);\n};\n\nexport const getWeekDays = (lang: string, weekStart: WeekStart): string[] => {\n  const weekdays: string[] = [];\n  const date = new Date(0);\n  date.setDate(date.getDate() - date.getDay() + weekStart);\n\n  const formatter = new Intl.DateTimeFormat(lang, { weekday: \"short\" });\n\n  for (let i = 0; i < 7; i++) {\n    weekdays.push(formatter.format(addDays(date, i)));\n  }\n\n  return weekdays;\n};\n\nexport const addDays = (date: Date, amount: number): Date => {\n  const newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + amount);\n  return newDate;\n};\n\nexport const addMonths = (date: Date, amount: number): Date => {\n  const newDate = new Date(date);\n  newDate.setMonth(newDate.getMonth() + amount);\n  return newDate;\n};\n\nexport const addYears = (date: Date, amount: number): Date => {\n  const newDate = new Date(date);\n  newDate.setFullYear(newDate.getFullYear() + amount);\n  return newDate;\n};\n\nexport const getFormattedDate = (language: string, date: Date, options?: Intl.DateTimeFormatOptions): string => {\n  let defaultOptions: Intl.DateTimeFormatOptions = {\n    day: \"numeric\",\n    month: \"long\",\n    year: \"numeric\",\n  };\n\n  if (options) {\n    defaultOptions = options;\n  }\n\n  return new Intl.DateTimeFormat(language, defaultOptions).format(date);\n};\n\nexport const startOfYearPeriod = (date: Date, years: number): number => {\n  const year = date.getFullYear();\n  return Math.floor(year / years) * years;\n};\n\nexport const isDateInDecade = (date: Date, startYear: number): boolean => {\n  const year = date.getFullYear();\n  const endYear = startYear + 9;\n  return year >= startYear && year <= endYear;\n};\n\nexport const isDateRangeInDecade = (\n  startDate: Date,\n  endDate: Date,\n  decadeStart: number,\n  decadeEnd: number,\n): boolean => {\n  const startYear = startDate.getFullYear();\n  const endYear = endDate.getFullYear();\n\n  if (decadeStart && decadeEnd) {\n    // Check if the start and end years of the date range are within the decade\n    const isStartYearInRange = isDateInRange(\n      new Date(startYear, 0, 1),\n      new Date(decadeStart, 0, 1),\n      new Date(decadeEnd, 11, 31),\n    );\n    const isEndYearInRange = isDateInRange(\n      new Date(endYear, 11, 31),\n      new Date(decadeStart, 0, 1),\n      new Date(decadeEnd, 11, 31),\n    );\n\n    return isStartYearInRange && isEndYearInRange;\n  }\n\n  // If decadeStart or decadeEnd is not provided, treat it as an open-ended range\n  return true;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}