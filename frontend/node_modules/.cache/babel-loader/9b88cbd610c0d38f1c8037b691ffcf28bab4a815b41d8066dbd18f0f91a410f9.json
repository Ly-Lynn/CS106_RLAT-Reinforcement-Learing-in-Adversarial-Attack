{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { useListItem, useMergeRefs } from '@floating-ui/react';\nimport { forwardRef } from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport { mergeDeep } from '../../helpers/merge-deep.mjs';\nimport { ButtonBase } from '../Button/ButtonBase.mjs';\nimport { useDropdownContext } from './DropdownContext.mjs';\nconst DropdownItem = forwardRef((_ref, forwardedRef) => {\n  let {\n    children,\n    className,\n    icon: Icon,\n    onClick,\n    theme: customTheme = {},\n    ...props\n  } = _ref;\n  const {\n    ref: listItemRef,\n    index\n  } = useListItem({\n    label: typeof children === \"string\" ? children : void 0\n  });\n  const ref = useMergeRefs([forwardedRef, listItemRef]);\n  const {\n    theme: rootTheme,\n    activeIndex,\n    dismissOnClick,\n    getItemProps,\n    handleSelect\n  } = useDropdownContext();\n  const isActive = activeIndex === index;\n  const theme = mergeDeep(rootTheme.floating.item, customTheme);\n  const theirProps = props;\n  return /* @__PURE__ */jsx(\"li\", {\n    role: \"menuitem\",\n    className: theme.container,\n    children: /* @__PURE__ */jsxs(ButtonBase, {\n      ref,\n      className: twMerge(theme.base, className),\n      ...theirProps,\n      ...getItemProps({\n        onClick: () => {\n          onClick === null || onClick === void 0 || onClick();\n          dismissOnClick && handleSelect(null);\n        }\n      }),\n      tabIndex: isActive ? 0 : -1,\n      children: [Icon && /* @__PURE__ */jsx(Icon, {\n        className: theme.icon\n      }), children]\n    })\n  });\n});\nDropdownItem.displayName = \"DropdownItem\";\nexport { DropdownItem };","map":{"version":3,"names":["DropdownItem","forwardRef","_ref","forwardedRef","children","className","icon","Icon","onClick","theme","customTheme","props","ref","listItemRef","index","useListItem","label","useMergeRefs","rootTheme","activeIndex","dismissOnClick","getItemProps","handleSelect","useDropdownContext","isActive","mergeDeep","floating","item","theirProps","jsx","role","container","jsxs","ButtonBase","twMerge","base","tabIndex"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\Dropdown\\DropdownItem.tsx"],"sourcesContent":["\"use client\";\n\nimport { useListItem, useMergeRefs } from \"@floating-ui/react\";\nimport { forwardRef, type ComponentProps, type ElementType, type FC, type RefCallback } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport type { PolymorphicComponentPropWithRef, PolymorphicRef } from \"../../helpers/generic-as-prop\";\nimport { mergeDeep } from \"../../helpers/merge-deep\";\nimport type { DeepPartial } from \"../../types\";\nimport { ButtonBase, type ButtonBaseProps } from \"../Button/ButtonBase\";\nimport { useDropdownContext } from \"./DropdownContext\";\n\nexport interface FlowbiteDropdownItemTheme {\n  container: string;\n  base: string;\n  icon: string;\n}\n\nexport type DropdownItemProps<T extends ElementType = \"button\"> = PolymorphicComponentPropWithRef<\n  T,\n  {\n    href?: string;\n    icon?: FC<ComponentProps<\"svg\">>;\n    onClick?: () => void;\n    theme?: DeepPartial<FlowbiteDropdownItemTheme>;\n  }\n>;\n\ntype DropdownItemType = (<C extends ElementType = \"button\">(props: DropdownItemProps<C>) => JSX.Element) & {\n  displayName?: string;\n};\n\nexport const DropdownItem = forwardRef(\n  <T extends ElementType = \"button\">(\n    { children, className, icon: Icon, onClick, theme: customTheme = {}, ...props }: DropdownItemProps<T>,\n    forwardedRef: PolymorphicRef<T>,\n  ) => {\n    const { ref: listItemRef, index } = useListItem({ label: typeof children === \"string\" ? children : undefined });\n    const ref = useMergeRefs([forwardedRef, listItemRef]);\n    const { theme: rootTheme, activeIndex, dismissOnClick, getItemProps, handleSelect } = useDropdownContext();\n    const isActive = activeIndex === index;\n    const theme = mergeDeep(rootTheme.floating.item, customTheme);\n\n    const theirProps = props as ButtonBaseProps<T>;\n\n    return (\n      <li role=\"menuitem\" className={theme.container}>\n        <ButtonBase\n          ref={ref as RefCallback<T>}\n          className={twMerge(theme.base, className)}\n          {...theirProps}\n          {...getItemProps({\n            onClick: () => {\n              onClick?.();\n              dismissOnClick && handleSelect(null);\n            },\n          })}\n          tabIndex={isActive ? 0 : -1}\n        >\n          {Icon && <Icon className={theme.icon} />}\n          {children}\n        </ButtonBase>\n      </li>\n    );\n  },\n) as DropdownItemType;\n\nDropdownItem.displayName = \"DropdownItem\";\n"],"mappings":";;;;;;;;;AAUA,MAAKA,YAAU,GAAAC,UAAe,CAC9B,CAAAC,IAAA,EAAiFC,YAAW,KAAQ;EAAA,IAApG;IAAIC,QAAQ;IAAGC,SAAE;IAAAC,IAAa,EAAAC,IAAK;IAAEC,OAAG;IAAAC,KAAY,EAAEC,WAAO,GAAO;IAAA,GAAAC;EAAa,IAAAT,IAAA;EAC7E,MAAM;IAAAU,GAAG,EAAGC,WAAY;IAAEC;EAAA,IAAAC,WAAc;IAAAC,KAAc,SAAAZ,QAAA,gBAAAA,QAAA;EAAA;EACtD,MAAMQ,GAAE,GAAAK,YAAgB,EAAEd,YAAW,EAAEU,WAAA,EAAc;EACrD,MAAM;IAAAJ,KAAA,EAAQS,SAAG;IAAAC,WAAgB;IAAMC,cAAA;IAAAC,YAAA;IAAAC;EAAA,IAAAC,kBAAA;EACvC,MAAMC,QAAQ,GAAAL,WAAU,KAASL,KAAC;EAClC,MAAML,KAAA,GAAAgB,SAAa,CAAKP,SAAC,CAAAQ,QAAA,CAAAC,IAAA,EAAAjB,WAAA;EACzB,MAAAkB,UAAA,GAAAjB,KAAuB;EAC3B,OAAM,eAAUkB,GAAA;IAAAC,IAAA;IAAAzB,SAAA,EAAAI,KAAA,CAAAsB,SAAA;IAAA3B,QAAA,iBAAA4B,IAAA,CACVC,UAAA,EACN;MACQrB,GAAA;MACAP,SAAG,EAAA6B,OAAU,CAAAzB,KAAA,CAAA0B,IAAA,EAAA9B,SAAA;MACb,GAAGuB,UAAA;MACX,GAAUP,YAAS;QACnBb,OAAY,EAAOA,CAAA,KAAK;UACZA,OAAA,aAAAA,OAAA,eAAAA,OAAA;UACDY,cAAA,IAAAE,YAAA;QACD;MACF;MACAc,QAAQ,EAAEZ,QAAA;MAClBpB,QAAc,GACJG,IAAA,IAAQ,eAAAsB,GAAA,CAAAtB,IAAA;QAAAF,SAAA,EAAAI,KAAA,CAAAH;MAAA,IACTF,QAAA;IAEJ,CACF;EAAA;AACD,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}