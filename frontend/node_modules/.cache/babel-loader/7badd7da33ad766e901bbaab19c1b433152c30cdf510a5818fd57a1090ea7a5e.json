{"ast":null,"code":"import { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport { mergeDeep } from '../../helpers/merge-deep.mjs';\nimport { getTheme } from '../../theme-store/index.mjs';\nimport { Spinner } from '../Spinner/Spinner.mjs';\nimport { ButtonBase } from './ButtonBase.mjs';\nimport { ButtonGroup } from './ButtonGroup.mjs';\nconst ButtonComponent = forwardRef((_ref, ref) => {\n  var _theme$outline$color$;\n  let {\n    children,\n    className,\n    color = \"info\",\n    disabled,\n    fullSized,\n    isProcessing = false,\n    processingLabel = \"Loading...\",\n    processingSpinner,\n    gradientDuoTone,\n    gradientMonochrome,\n    label,\n    outline = false,\n    pill = false,\n    positionInGroup = \"none\",\n    size = \"md\",\n    theme: customTheme = {},\n    ...props\n  } = _ref;\n  const {\n    buttonGroup: groupTheme,\n    button: buttonTheme\n  } = getTheme();\n  const theme = mergeDeep(buttonTheme, customTheme);\n  const theirProps = props;\n  return /* @__PURE__ */jsx(ButtonBase, {\n    ref,\n    disabled,\n    className: twMerge(theme.base, disabled && theme.disabled, !gradientDuoTone && !gradientMonochrome && theme.color[color], gradientDuoTone && !gradientMonochrome && theme.gradientDuoTone[gradientDuoTone], !gradientDuoTone && gradientMonochrome && theme.gradient[gradientMonochrome], outline && ((_theme$outline$color$ = theme.outline.color[color]) !== null && _theme$outline$color$ !== void 0 ? _theme$outline$color$ : theme.outline.color.default), theme.pill[pill ? \"on\" : \"off\"], fullSized && theme.fullSized, groupTheme.position[positionInGroup], className),\n    ...theirProps,\n    children: /* @__PURE__ */jsx(\"span\", {\n      className: twMerge(theme.inner.base, theme.outline[outline ? \"on\" : \"off\"], theme.outline.pill[outline && pill ? \"on\" : \"off\"], theme.size[size], outline && !theme.outline.color[color] && theme.inner.outline, isProcessing && theme.isProcessing, isProcessing && theme.inner.isProcessingPadding[size], theme.inner.position[positionInGroup]),\n      children: /* @__PURE__ */jsxs(Fragment, {\n        children: [isProcessing && /* @__PURE__ */jsx(\"span\", {\n          className: twMerge(theme.spinnerSlot, theme.spinnerLeftPosition[size]),\n          children: processingSpinner || /* @__PURE__ */jsx(Spinner, {\n            size\n          })\n        }), typeof children !== \"undefined\" ? children : /* @__PURE__ */jsx(\"span\", {\n          \"data-testid\": \"flowbite-button-label\",\n          className: twMerge(theme.label),\n          children: isProcessing ? processingLabel : label\n        })]\n      })\n    })\n  });\n});\nButtonComponent.displayName = \"Button\";\nconst Button = Object.assign(ButtonComponent, {\n  Group: ButtonGroup\n});\nexport { Button };","map":{"version":3,"names":["ButtonComponent","forwardRef","_ref","ref","_theme$outline$color$","children","className","color","disabled","fullSized","isProcessing","processingLabel","processingSpinner","gradientDuoTone","gradientMonochrome","label","outline","pill","positionInGroup","size","theme","customTheme","props","buttonGroup","groupTheme","button","buttonTheme","getTheme","mergeDeep","theirProps","jsx","ButtonBase","twMerge","base","gradient","default","position","inner","isProcessingPadding","jsxs","Fragment","spinnerSlot","spinnerLeftPosition","Spinner","displayName","Button","Object","assign","Group","ButtonGroup"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\Button\\Button.tsx"],"sourcesContent":["import type { ElementType } from \"react\";\nimport { forwardRef, type ReactNode } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport type { PolymorphicComponentPropWithRef, PolymorphicRef } from \"../../helpers/generic-as-prop\";\nimport { mergeDeep } from \"../../helpers/merge-deep\";\nimport { getTheme } from \"../../theme-store\";\nimport type { DeepPartial } from \"../../types\";\nimport type {\n  FlowbiteBoolean,\n  FlowbiteColors,\n  FlowbiteGradientColors,\n  FlowbiteGradientDuoToneColors,\n  FlowbiteSizes,\n} from \"../Flowbite\";\nimport { Spinner } from \"../Spinner\";\nimport { ButtonBase, type ButtonBaseProps } from \"./ButtonBase\";\nimport type { PositionInButtonGroup } from \"./ButtonGroup\";\nimport { ButtonGroup } from \"./ButtonGroup\";\n\nexport interface FlowbiteButtonTheme {\n  base: string;\n  fullSized: string;\n  color: FlowbiteColors;\n  disabled: string;\n  isProcessing: string;\n  spinnerSlot: string;\n  spinnerLeftPosition: ButtonSizes;\n  gradient: ButtonGradientColors;\n  gradientDuoTone: ButtonGradientDuoToneColors;\n  inner: FlowbiteButtonInnerTheme;\n  label: string;\n  outline: FlowbiteButtonOutlineTheme;\n  pill: FlowbiteBoolean;\n  size: ButtonSizes;\n}\n\nexport interface FlowbiteButtonInnerTheme {\n  base: string;\n  position: PositionInButtonGroup;\n  outline: string;\n  isProcessingPadding: ButtonSizes;\n}\n\nexport interface FlowbiteButtonOutlineTheme extends FlowbiteBoolean {\n  color: ButtonOutlineColors;\n  pill: FlowbiteBoolean;\n}\n\nexport interface ButtonColors\n  extends Pick<FlowbiteColors, \"dark\" | \"failure\" | \"gray\" | \"info\" | \"light\" | \"purple\" | \"success\" | \"warning\"> {\n  [key: string]: string;\n}\n\nexport interface ButtonGradientColors extends FlowbiteGradientColors {\n  [key: string]: string;\n}\n\nexport interface ButtonGradientDuoToneColors extends FlowbiteGradientDuoToneColors {\n  [key: string]: string;\n}\n\nexport interface ButtonOutlineColors extends Pick<FlowbiteColors, \"gray\"> {\n  [key: string]: string;\n}\n\nexport interface ButtonSizes extends Pick<FlowbiteSizes, \"xs\" | \"sm\" | \"lg\" | \"xl\"> {\n  [key: string]: string;\n}\n\nexport type ButtonProps<T extends ElementType = \"button\"> = PolymorphicComponentPropWithRef<\n  T,\n  {\n    href?: string;\n    color?: keyof FlowbiteColors;\n    fullSized?: boolean;\n    gradientDuoTone?: keyof ButtonGradientDuoToneColors;\n    gradientMonochrome?: keyof ButtonGradientColors;\n    target?: string;\n    isProcessing?: boolean;\n    processingLabel?: string;\n    processingSpinner?: ReactNode;\n    label?: ReactNode;\n    outline?: boolean;\n    pill?: boolean;\n    positionInGroup?: keyof PositionInButtonGroup;\n    size?: keyof ButtonSizes;\n    theme?: DeepPartial<FlowbiteButtonTheme>;\n  }\n>;\n\ntype ButtonComponentType = (<C extends ElementType = \"button\">(props: ButtonProps<C>) => JSX.Element) & {\n  displayName?: string;\n};\n\nconst ButtonComponent = forwardRef(\n  <T extends ElementType = \"button\">(\n    {\n      children,\n      className,\n      color = \"info\",\n      disabled,\n      fullSized,\n      isProcessing = false,\n      processingLabel = \"Loading...\",\n      processingSpinner,\n      gradientDuoTone,\n      gradientMonochrome,\n      label,\n      outline = false,\n      pill = false,\n      positionInGroup = \"none\",\n      size = \"md\",\n      theme: customTheme = {},\n      ...props\n    }: ButtonProps<T>,\n    ref: PolymorphicRef<T>,\n  ) => {\n    const { buttonGroup: groupTheme, button: buttonTheme } = getTheme();\n    const theme = mergeDeep(buttonTheme, customTheme);\n\n    const theirProps = props as ButtonBaseProps<T>;\n\n    return (\n      <ButtonBase\n        ref={ref}\n        disabled={disabled}\n        className={twMerge(\n          theme.base,\n          disabled && theme.disabled,\n          !gradientDuoTone && !gradientMonochrome && theme.color[color],\n          gradientDuoTone && !gradientMonochrome && theme.gradientDuoTone[gradientDuoTone],\n          !gradientDuoTone && gradientMonochrome && theme.gradient[gradientMonochrome],\n          outline && (theme.outline.color[color] ?? theme.outline.color.default),\n          theme.pill[pill ? \"on\" : \"off\"],\n          fullSized && theme.fullSized,\n          groupTheme.position[positionInGroup],\n          className,\n        )}\n        {...theirProps}\n      >\n        <span\n          className={twMerge(\n            theme.inner.base,\n            theme.outline[outline ? \"on\" : \"off\"],\n            theme.outline.pill[outline && pill ? \"on\" : \"off\"],\n            theme.size[size],\n            outline && !theme.outline.color[color] && theme.inner.outline,\n            isProcessing && theme.isProcessing,\n            isProcessing && theme.inner.isProcessingPadding[size],\n            theme.inner.position[positionInGroup],\n          )}\n        >\n          <>\n            {isProcessing && (\n              <span className={twMerge(theme.spinnerSlot, theme.spinnerLeftPosition[size])}>\n                {processingSpinner || <Spinner size={size} />}\n              </span>\n            )}\n            {typeof children !== \"undefined\" ? (\n              children\n            ) : (\n              <span data-testid=\"flowbite-button-label\" className={twMerge(theme.label)}>\n                {isProcessing ? processingLabel : label}\n              </span>\n            )}\n          </>\n        </span>\n      </ButtonBase>\n    );\n  },\n) as ButtonComponentType;\n\nButtonComponent.displayName = \"Button\";\n\nexport const Button = Object.assign(ButtonComponent, {\n  Group: ButtonGroup,\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}