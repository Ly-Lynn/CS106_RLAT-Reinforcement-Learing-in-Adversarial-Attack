{"ast":null,"code":"import { cloneDeep } from './clone-deep.mjs';\nimport { isObject } from './is-object.mjs';\nfunction mergeDeep(target, source) {\n  if (isObject(source) && Object.keys(source).length === 0) {\n    return cloneDeep({\n      ...target,\n      ...source\n    });\n  }\n  const output = {\n    ...target,\n    ...source\n  };\n  if (isObject(source) && isObject(target)) {\n    for (const key in source) {\n      if (isObject(source[key]) && key in target && isObject(target[key])) {\n        output[key] = mergeDeep(target[key], source[key]);\n      } else {\n        output[key] = isObject(source[key]) ? cloneDeep(source[key]) : source[key];\n      }\n    }\n  }\n  return output;\n}\nexport { mergeDeep };","map":{"version":3,"names":["mergeDeep","target","source","isObject","Object","keys","length","cloneDeep","output","key"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\helpers\\merge-deep.ts"],"sourcesContent":["import { cloneDeep } from \"./clone-deep\";\nimport { isObject } from \"./is-object\";\n\n/**\n * Merge and deep copy the values of all of the enumerable own properties of target object from source object to a new object\n * @param target The target object to get properties from.\n * @param source The source object from which to copy properties.\n * @return A new merged and deep copied object.\n */\nexport function mergeDeep<T extends object, S extends object>(target: T, source: S): T & S {\n  if (isObject(source) && Object.keys(source).length === 0) {\n    return cloneDeep({ ...target, ...source });\n  }\n\n  const output = { ...target, ...source };\n\n  if (isObject(source) && isObject(target)) {\n    for (const key in source) {\n      if (isObject(source[key]) && key in target && isObject(target[key])) {\n        (output as Record<string, unknown>)[key] = mergeDeep(target[key] as object, source[key] as object);\n      } else {\n        (output as Record<string, unknown>)[key] = isObject(source[key]) ? cloneDeep(source[key]) : source[key];\n      }\n    }\n  }\n\n  return output;\n}\n"],"mappings":";;AAGO,SAASA,SAASA,CAACC,MAAM,EAAEC,MAAM,EAAE;EACxC,IAAIC,QAAQ,CAACD,MAAM,CAAC,IAAIE,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CAACI,MAAM,KAAK,CAAC,EAAE;IACxD,OAAOC,SAAS,CAAC;MAAE,GAAGN,MAAM;MAAE,GAAGC;IAAM,CAAE,CAAC;EAC9C;EACE,MAAMM,MAAM,GAAG;IAAE,GAAGP,MAAM;IAAE,GAAGC;EAAM,CAAE;EACvC,IAAIC,QAAQ,CAACD,MAAM,CAAC,IAAIC,QAAQ,CAACF,MAAM,CAAC,EAAE;IACxC,KAAK,MAAMQ,GAAG,IAAIP,MAAM,EAAE;MACxB,IAAIC,QAAQ,CAACD,MAAM,CAACO,GAAG,CAAC,CAAC,IAAIA,GAAG,IAAIR,MAAM,IAAIE,QAAQ,CAACF,MAAM,CAACQ,GAAG,CAAC,CAAC,EAAE;QACnED,MAAM,CAACC,GAAG,CAAC,GAAGT,SAAS,CAACC,MAAM,CAACQ,GAAG,CAAC,EAAEP,MAAM,CAACO,GAAG,CAAC,CAAC;MACzD,CAAO,MAAM;QACLD,MAAM,CAACC,GAAG,CAAC,GAAGN,QAAQ,CAACD,MAAM,CAACO,GAAG,CAAC,CAAC,GAAGF,SAAS,CAACL,MAAM,CAACO,GAAG,CAAC,CAAC,GAAGP,MAAM,CAACO,GAAG,CAAC;MAClF;IACA;EACA;EACE,OAAOD,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}