{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef, useId, useMemo, Children, useRef, useState, useEffect, useImperativeHandle } from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport { mergeDeep } from '../../helpers/merge-deep.mjs';\nimport { getTheme } from '../../theme-store/index.mjs';\nimport { TabItem } from './TabItem.mjs';\nconst TabsComponent = forwardRef((_ref, ref) => {\n  let {\n    children,\n    className,\n    onActiveTabChange,\n    style = \"default\",\n    theme: customTheme = {},\n    ...props\n  } = _ref;\n  const theme = mergeDeep(getTheme().tabs, customTheme);\n  const id = useId();\n  const tabs = useMemo(() => Children.map(Children.toArray(children), _ref2 => {\n    let {\n      props: props2\n    } = _ref2;\n    return props2;\n  }), [children]);\n  const tabRefs = useRef([]);\n  const [activeTab, setActiveTab] = useState(Math.max(0, tabs.findIndex(tab => tab.active)));\n  const [focusedTab, setFocusedTab] = useState(-1);\n  const setActiveTabWithCallback = activeTab2 => {\n    setActiveTab(activeTab2);\n    if (onActiveTabChange) onActiveTabChange(activeTab2);\n  };\n  const handleClick = _ref3 => {\n    let {\n      target\n    } = _ref3;\n    setActiveTabWithCallback(target);\n    setFocusedTab(target);\n  };\n  const handleKeyboard = _ref4 => {\n    let {\n      event,\n      target\n    } = _ref4;\n    if (event.key === \"ArrowLeft\") {\n      setFocusedTab(Math.max(0, focusedTab - 1));\n    }\n    if (event.key === \"ArrowRight\") {\n      setFocusedTab(Math.min(tabs.length - 1, focusedTab + 1));\n    }\n    if (event.key === \"Enter\") {\n      setActiveTabWithCallback(target);\n      setFocusedTab(target);\n    }\n  };\n  const tabItemStyle = theme.tablist.tabitem.styles[style];\n  const tabItemContainerStyle = theme.tabitemcontainer.styles[style];\n  useEffect(() => {\n    var _tabRefs$current$focu;\n    (_tabRefs$current$focu = tabRefs.current[focusedTab]) === null || _tabRefs$current$focu === void 0 || _tabRefs$current$focu.focus();\n  }, [focusedTab]);\n  useImperativeHandle(ref, () => ({\n    setActiveTab: setActiveTabWithCallback\n  }));\n  return /* @__PURE__ */jsxs(\"div\", {\n    className: twMerge(theme.base, className),\n    children: [/* @__PURE__ */jsx(\"div\", {\n      \"aria-label\": \"Tabs\",\n      role: \"tablist\",\n      className: twMerge(theme.tablist.base, theme.tablist.styles[style], className),\n      ...props,\n      children: tabs.map((tab, index) => /* @__PURE__ */jsxs(\"button\", {\n        type: \"button\",\n        \"aria-controls\": \"\".concat(id, \"-tabpanel-\").concat(index),\n        \"aria-selected\": index === activeTab,\n        className: twMerge(theme.tablist.tabitem.base, tabItemStyle.base, index === activeTab && tabItemStyle.active.on, index !== activeTab && !tab.disabled && tabItemStyle.active.off),\n        disabled: tab.disabled,\n        id: \"\".concat(id, \"-tab-\").concat(index),\n        onClick: () => handleClick({\n          target: index\n        }),\n        onKeyDown: event => handleKeyboard({\n          event,\n          target: index\n        }),\n        ref: element => tabRefs.current[index] = element,\n        role: \"tab\",\n        tabIndex: index === focusedTab ? 0 : -1,\n        style: {\n          zIndex: index === focusedTab ? 2 : 1\n        },\n        children: [tab.icon && /* @__PURE__ */jsx(tab.icon, {\n          className: theme.tablist.tabitem.icon\n        }), tab.title]\n      }, index))\n    }), /* @__PURE__ */jsx(\"div\", {\n      className: twMerge(theme.tabitemcontainer.base, tabItemContainerStyle),\n      children: tabs.map((tab, index) => /* @__PURE__ */jsx(\"div\", {\n        \"aria-labelledby\": \"\".concat(id, \"-tab-\").concat(index),\n        className: theme.tabpanel,\n        hidden: index !== activeTab,\n        id: \"\".concat(id, \"-tabpanel-\").concat(index),\n        role: \"tabpanel\",\n        tabIndex: 0,\n        children: tab.children\n      }, index))\n    })]\n  });\n});\nTabsComponent.displayName = \"Tabs\";\nconst Tabs = Object.assign(TabsComponent, {\n  Item: TabItem\n});\nexport { Tabs };","map":{"version":3,"names":["TabsComponent","forwardRef","_ref","ref","children","className","onActiveTabChange","style","theme","customTheme","props","mergeDeep","getTheme","tabs","id","useId","useMemo","Children","map","toArray","_ref2","props2","tabRefs","useRef","activeTab","setActiveTab","useState","Math","max","findIndex","tab","active","focusedTab","setFocusedTab","setActiveTabWithCallback","activeTab2","handleClick","_ref3","target","handleKeyboard","_ref4","event","key","min","length","tabItemStyle","tablist","tabitem","styles","tabItemContainerStyle","tabitemcontainer","useEffect","_tabRefs$current$focu","current","focus","useImperativeHandle","jsxs","twMerge","base","jsx","role","index","type","concat","on","disabled","off","onClick","onKeyDown","element","tabIndex","zIndex","icon","title","tabpanel","hidden","displayName","Tabs","Object","assign","Item","TabItem"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\Tabs\\Tabs.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps, ForwardedRef, KeyboardEvent, PropsWithChildren, ReactElement } from \"react\";\nimport { Children, forwardRef, useEffect, useId, useImperativeHandle, useMemo, useRef, useState } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport { mergeDeep } from \"../../helpers/merge-deep\";\nimport { getTheme } from \"../../theme-store\";\nimport type { DeepPartial } from \"../../types\";\nimport type { FlowbiteBoolean } from \"../Flowbite\";\nimport type { TabItemProps } from \"./TabItem\";\nimport { TabItem } from \"./TabItem\";\n\nexport interface FlowbiteTabsTheme {\n  base: string;\n  tablist: {\n    base: string;\n    styles: TabStyles;\n    tabitem: {\n      base: string;\n      styles: TabStyleItem<TabStyles>;\n      icon: string;\n    };\n  };\n  tabitemcontainer: {\n    base: string;\n    styles: TabStyles;\n  };\n  tabpanel: string;\n}\n\nexport interface TabStyles {\n  default: string;\n  fullWidth: string;\n  pills: string;\n  underline: string;\n}\n\nexport interface TabStyleItemProps {\n  base: string;\n  active: FlowbiteBoolean;\n}\n\nexport type TabStyleItem<Type> = {\n  [K in keyof Type]: TabStyleItemProps;\n};\n\nexport type TabItemStatus = \"active\" | \"notActive\";\n\ninterface TabEventProps {\n  target: number;\n}\n\ninterface TabKeyboardEventProps extends TabEventProps {\n  event: KeyboardEvent<HTMLButtonElement>;\n}\n\nexport interface TabsProps extends Omit<ComponentProps<\"div\">, \"ref\" | \"style\"> {\n  onActiveTabChange?: (activeTab: number) => void;\n  style?: keyof TabStyles;\n  theme?: DeepPartial<FlowbiteTabsTheme>;\n}\n\nexport interface TabsRef {\n  setActiveTab: (activeTab: number) => void;\n}\n\nconst TabsComponent = forwardRef<TabsRef, TabsProps>(\n  (\n    { children, className, onActiveTabChange, style = \"default\", theme: customTheme = {}, ...props },\n    ref: ForwardedRef<TabsRef>,\n  ) => {\n    const theme = mergeDeep(getTheme().tabs, customTheme);\n\n    const id = useId();\n    const tabs = useMemo(\n      () =>\n        Children.map(\n          Children.toArray(children) as ReactElement<PropsWithChildren<TabItemProps>>[],\n          ({ props }) => props,\n        ),\n      [children],\n    );\n    const tabRefs = useRef<HTMLButtonElement[]>([]);\n    const [activeTab, setActiveTab] = useState(\n      Math.max(\n        0,\n        tabs.findIndex((tab) => tab.active),\n      ),\n    );\n    const [focusedTab, setFocusedTab] = useState(-1);\n\n    const setActiveTabWithCallback = (activeTab: number) => {\n      setActiveTab(activeTab);\n      if (onActiveTabChange) onActiveTabChange(activeTab);\n    };\n\n    const handleClick = ({ target }: TabEventProps): void => {\n      setActiveTabWithCallback(target);\n      setFocusedTab(target);\n    };\n\n    const handleKeyboard = ({ event, target }: TabKeyboardEventProps): void => {\n      if (event.key === \"ArrowLeft\") {\n        setFocusedTab(Math.max(0, focusedTab - 1));\n      }\n\n      if (event.key === \"ArrowRight\") {\n        setFocusedTab(Math.min(tabs.length - 1, focusedTab + 1));\n      }\n\n      if (event.key === \"Enter\") {\n        setActiveTabWithCallback(target);\n        setFocusedTab(target);\n      }\n    };\n\n    const tabItemStyle = theme.tablist.tabitem.styles[style];\n    const tabItemContainerStyle = theme.tabitemcontainer.styles[style];\n\n    useEffect(() => {\n      tabRefs.current[focusedTab]?.focus();\n    }, [focusedTab]);\n\n    useImperativeHandle(ref, () => ({\n      setActiveTab: setActiveTabWithCallback,\n    }));\n\n    return (\n      <div className={twMerge(theme.base, className)}>\n        <div\n          aria-label=\"Tabs\"\n          role=\"tablist\"\n          className={twMerge(theme.tablist.base, theme.tablist.styles[style], className)}\n          {...props}\n        >\n          {tabs.map((tab, index) => (\n            <button\n              key={index}\n              type=\"button\"\n              aria-controls={`${id}-tabpanel-${index}`}\n              aria-selected={index === activeTab}\n              className={twMerge(\n                theme.tablist.tabitem.base,\n                tabItemStyle.base,\n                index === activeTab && tabItemStyle.active.on,\n                index !== activeTab && !tab.disabled && tabItemStyle.active.off,\n              )}\n              disabled={tab.disabled}\n              id={`${id}-tab-${index}`}\n              onClick={() => handleClick({ target: index })}\n              onKeyDown={(event) => handleKeyboard({ event, target: index })}\n              ref={(element) => (tabRefs.current[index] = element as HTMLButtonElement)}\n              role=\"tab\"\n              tabIndex={index === focusedTab ? 0 : -1}\n              style={{ zIndex: index === focusedTab ? 2 : 1 }}\n            >\n              {tab.icon && <tab.icon className={theme.tablist.tabitem.icon} />}\n              {tab.title}\n            </button>\n          ))}\n        </div>\n        <div className={twMerge(theme.tabitemcontainer.base, tabItemContainerStyle)}>\n          {tabs.map((tab, index) => (\n            <div\n              key={index}\n              aria-labelledby={`${id}-tab-${index}`}\n              className={theme.tabpanel}\n              hidden={index !== activeTab}\n              id={`${id}-tabpanel-${index}`}\n              role=\"tabpanel\"\n              tabIndex={0}\n            >\n              {tab.children}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  },\n);\n\nTabsComponent.displayName = \"Tabs\";\n\nexport const Tabs = Object.assign(TabsComponent, {\n  Item: TabItem,\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}