{"ast":null,"code":"'use client';\n\nimport { jsxs, Fragment, jsx } from 'react/jsx-runtime';\nimport { useFocus, autoUpdate } from '@floating-ui/react';\nimport { useRef, useState, useEffect } from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport { useBaseFLoating, useFloatingInteractions } from '../../hooks/use-floating.mjs';\nimport { getArrowPlacement } from './helpers.mjs';\nconst Floating = ({\n  animation = \"duration-300\",\n  arrow = true,\n  children,\n  className,\n  content,\n  placement = \"top\",\n  style = \"dark\",\n  theme,\n  trigger = \"hover\",\n  minWidth,\n  ...props\n}) => {\n  const arrowRef = useRef(null);\n  const [open, setOpen] = useState(false);\n  const floatingProperties = useBaseFLoating({\n    open,\n    placement,\n    arrowRef,\n    setOpen\n  });\n  const {\n    context,\n    middlewareData: {\n      arrow: {\n        x: arrowX,\n        y: arrowY\n      } = {}\n    },\n    refs,\n    strategy,\n    update,\n    x,\n    y\n  } = floatingProperties;\n  const focus = useFocus(context);\n  const {\n    getFloatingProps,\n    getReferenceProps\n  } = useFloatingInteractions({\n    context,\n    role: \"tooltip\",\n    trigger,\n    interactions: [focus]\n  });\n  useEffect(() => {\n    if (refs.reference.current && refs.floating.current && open) {\n      return autoUpdate(refs.reference.current, refs.floating.current, update);\n    }\n  }, [open, refs.floating, refs.reference, update]);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(\"div\", {\n      ref: refs.setReference,\n      className: theme.target,\n      \"data-testid\": \"flowbite-tooltip-target\",\n      ...getReferenceProps(),\n      children\n    }), /* @__PURE__ */jsxs(\"div\", {\n      ref: refs.setFloating,\n      \"data-testid\": \"flowbite-tooltip\",\n      ...getFloatingProps({\n        className: twMerge(theme.base, animation && `${theme.animation} ${animation}`, !open && theme.hidden, theme.style[style], className),\n        style: {\n          position: strategy,\n          top: y ?? \" \",\n          left: x ?? \" \",\n          minWidth\n        },\n        ...props\n      }),\n      children: [/* @__PURE__ */jsx(\"div\", {\n        className: theme.content,\n        children: content\n      }), arrow && /* @__PURE__ */jsx(\"div\", {\n        className: twMerge(theme.arrow.base, style === \"dark\" && theme.arrow.style.dark, style === \"light\" && theme.arrow.style.light, style === \"auto\" && theme.arrow.style.auto),\n        \"data-testid\": \"flowbite-tooltip-arrow\",\n        ref: arrowRef,\n        style: {\n          top: arrowY ?? \" \",\n          left: arrowX ?? \" \",\n          right: \" \",\n          bottom: \" \",\n          [getArrowPlacement({\n            placement: floatingProperties.placement\n          })]: theme.arrow.placement\n        },\n        children: \"\\xA0\"\n      })]\n    })]\n  });\n};\nexport { Floating };","map":{"version":3,"names":["Floating","animation","arrow","children","className","content","placement","style","theme","trigger","minWidth","props","arrowRef","useRef","open","setOpen","useState","floatingProperties","useBaseFLoating","context","middlewareData","x","arrowX","y","arrowY","refs","strategy","update","focus","useFocus","getFloatingProps","getReferenceProps","useFloatingInteractions","role","interactions","useEffect","reference","current","floating","autoUpdate","jsxs","Fragment","jsx","ref","setReference","target","setFloating","twMerge","base","hidden","position","top","left","dark","light","auto","right","bottom","getArrowPlacement"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\Floating\\Floating.tsx"],"sourcesContent":["\"use client\";\n\nimport type { Placement } from \"@floating-ui/core\";\nimport { autoUpdate, useFocus } from \"@floating-ui/react\";\nimport type { ComponentProps, FC, ReactNode } from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport { useBaseFLoating, useFloatingInteractions } from \"../../hooks/use-floating\";\nimport { getArrowPlacement } from \"./helpers\";\n\nexport interface FlowbiteFloatingTheme {\n  arrow: FlowbiteFloatingArrowTheme;\n  animation: string;\n  base: string;\n  content: string;\n  hidden: string;\n  style: {\n    auto: string;\n    dark: string;\n    light: string;\n  };\n  target: string;\n}\n\nexport interface FlowbiteFloatingArrowTheme {\n  base: string;\n  placement: string;\n  style: {\n    dark: string;\n    light: string;\n    auto: string;\n  };\n}\n\nexport type FloatingStyle = \"dark\" | \"light\" | \"auto\";\n\nexport interface FloatingProps extends Omit<ComponentProps<\"div\">, \"content\" | \"style\"> {\n  animation?: false | `duration-${number}`;\n  arrow?: boolean;\n  content: ReactNode;\n  placement?: \"auto\" | Placement;\n  style?: FloatingStyle;\n  theme: FlowbiteFloatingTheme;\n  trigger?: \"hover\" | \"click\";\n  minWidth?: number;\n}\n\n/**\n * @see https://floating-ui.com/docs/react-dom-interactions\n */\nexport const Floating: FC<FloatingProps> = ({\n  animation = \"duration-300\",\n  arrow = true,\n  children,\n  className,\n  content,\n  placement = \"top\",\n  style = \"dark\",\n  theme,\n  trigger = \"hover\",\n  minWidth,\n  ...props\n}) => {\n  const arrowRef = useRef<HTMLDivElement>(null);\n  const [open, setOpen] = useState(false);\n\n  const floatingProperties = useBaseFLoating({\n    open,\n    placement,\n    arrowRef,\n    setOpen,\n  });\n\n  const {\n    context,\n    middlewareData: { arrow: { x: arrowX, y: arrowY } = {} },\n    refs,\n    strategy,\n    update,\n    x,\n    y,\n  } = floatingProperties;\n\n  const focus = useFocus(context);\n  const { getFloatingProps, getReferenceProps } = useFloatingInteractions({\n    context,\n    role: \"tooltip\",\n    trigger,\n    interactions: [focus],\n  });\n\n  useEffect(() => {\n    if (refs.reference.current && refs.floating.current && open) {\n      return autoUpdate(refs.reference.current, refs.floating.current, update);\n    }\n  }, [open, refs.floating, refs.reference, update]);\n\n  return (\n    <>\n      <div\n        ref={refs.setReference}\n        className={theme.target}\n        data-testid=\"flowbite-tooltip-target\"\n        {...getReferenceProps()}\n      >\n        {children}\n      </div>\n      <div\n        ref={refs.setFloating}\n        data-testid=\"flowbite-tooltip\"\n        {...getFloatingProps({\n          className: twMerge(\n            theme.base,\n            animation && `${theme.animation} ${animation}`,\n            !open && theme.hidden,\n            theme.style[style],\n            className,\n          ),\n          style: {\n            position: strategy,\n            top: y ?? \" \",\n            left: x ?? \" \",\n            minWidth,\n          },\n          ...props,\n        })}\n      >\n        <div className={theme.content}>{content}</div>\n        {arrow && (\n          <div\n            className={twMerge(\n              theme.arrow.base,\n              style === \"dark\" && theme.arrow.style.dark,\n              style === \"light\" && theme.arrow.style.light,\n              style === \"auto\" && theme.arrow.style.auto,\n            )}\n            data-testid=\"flowbite-tooltip-arrow\"\n            ref={arrowRef}\n            style={{\n              top: arrowY ?? \" \",\n              left: arrowX ?? \" \",\n              right: \" \",\n              bottom: \" \",\n              [getArrowPlacement({ placement: floatingProperties.placement })]: theme.arrow.placement,\n            }}\n          >\n            &nbsp;\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}