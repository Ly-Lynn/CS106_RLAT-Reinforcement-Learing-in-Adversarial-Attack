{"ast":null,"code":"'use client';\n\nimport { jsxs, Fragment, jsx } from 'react/jsx-runtime';\nimport { useMergeRefs, FloatingFocusManager } from '@floating-ui/react';\nimport { useState, useRef, isValidElement, useMemo, cloneElement } from 'react';\nimport { mergeDeep } from '../../helpers/merge-deep.mjs';\nimport { useBaseFLoating, useFloatingInteractions } from '../../hooks/use-floating.mjs';\nimport { getTheme } from '../../theme-store/index.mjs';\nimport { getArrowPlacement } from '../Floating/helpers.mjs';\nfunction Popover(_ref) {\n  let {\n    children,\n    content,\n    theme: customTheme = {},\n    arrow = true,\n    trigger = \"click\",\n    initialOpen,\n    open: controlledOpen,\n    onOpenChange: setControlledOpen,\n    placement: theirPlacement = \"bottom\",\n    ...props\n  } = _ref;\n  const [uncontrolledOpen, setUncontrolledOpen] = useState(Boolean(initialOpen));\n  const arrowRef = useRef(null);\n  const theme = mergeDeep(getTheme().popover, customTheme);\n  const open = controlledOpen !== null && controlledOpen !== void 0 ? controlledOpen : uncontrolledOpen;\n  const setOpen = setControlledOpen !== null && setControlledOpen !== void 0 ? setControlledOpen : setUncontrolledOpen;\n  const floatingProps = useBaseFLoating({\n    open,\n    placement: theirPlacement,\n    arrowRef,\n    setOpen\n  });\n  const {\n    floatingStyles,\n    context,\n    placement,\n    middlewareData: {\n      arrow: {\n        x: arrowX,\n        y: arrowY\n      } = {}\n    },\n    refs\n  } = floatingProps;\n  const {\n    getFloatingProps,\n    getReferenceProps\n  } = useFloatingInteractions({\n    context,\n    role: \"dialog\",\n    trigger\n  });\n  const childrenRef = children.ref;\n  const ref = useMergeRefs([context.refs.setReference, childrenRef]);\n  if (!isValidElement(children)) {\n    throw Error(\"Invalid target element\");\n  }\n  const target = useMemo(() => {\n    return cloneElement(children, getReferenceProps({\n      ref,\n      \"data-testid\": \"flowbite-popover-target\",\n      ...(children === null || children === void 0 ? void 0 : children.props)\n    }));\n  }, [children, ref, getReferenceProps]);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [target, open && /* @__PURE__ */jsx(FloatingFocusManager, {\n      context,\n      modal: true,\n      children: /* @__PURE__ */jsx(\"div\", {\n        className: theme.base,\n        ref: refs.setFloating,\n        \"data-testid\": \"flowbite-popover\",\n        ...props,\n        style: floatingStyles,\n        ...getFloatingProps(),\n        children: /* @__PURE__ */jsxs(\"div\", {\n          className: \"relative\",\n          children: [arrow && /* @__PURE__ */jsx(\"div\", {\n            className: theme.arrow.base,\n            \"data-testid\": \"flowbite-popover-arrow\",\n            ref: arrowRef,\n            style: {\n              top: arrowY !== null && arrowY !== void 0 ? arrowY : \" \",\n              left: arrowX !== null && arrowX !== void 0 ? arrowX : \" \",\n              right: \" \",\n              bottom: \" \",\n              [getArrowPlacement({\n                placement\n              })]: theme.arrow.placement\n            },\n            children: \"\\xA0\"\n          }), /* @__PURE__ */jsx(\"div\", {\n            className: theme.content,\n            children: content\n          })]\n        })\n      })\n    })]\n  });\n}\nexport { Popover };","map":{"version":3,"names":["Popover","_ref","children","content","theme","customTheme","arrow","trigger","initialOpen","open","controlledOpen","onOpenChange","setControlledOpen","placement","theirPlacement","props","uncontrolledOpen","setUncontrolledOpen","useState","Boolean","arrowRef","useRef","mergeDeep","getTheme","popover","setOpen","floatingProps","useBaseFLoating","floatingStyles","context","middlewareData","x","arrowX","y","arrowY","refs","getFloatingProps","getReferenceProps","useFloatingInteractions","role","childrenRef","ref","useMergeRefs","setReference","isValidElement","Error","target","useMemo","cloneElement","jsxs","Fragment","jsx","FloatingFocusManager","modal","className","base","setFloating","style","top","left","right","bottom","getArrowPlacement"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\Popover\\Popover.tsx"],"sourcesContent":["\"use client\";\n\nimport type { Placement } from \"@floating-ui/react\";\nimport { FloatingFocusManager, useMergeRefs } from \"@floating-ui/react\";\nimport type { ComponentProps, ComponentPropsWithRef, Dispatch, ReactNode, SetStateAction } from \"react\";\nimport { cloneElement, isValidElement, useMemo, useRef, useState } from \"react\";\nimport { mergeDeep } from \"../../helpers/merge-deep\";\nimport { useBaseFLoating, useFloatingInteractions } from \"../../hooks/use-floating\";\nimport { getTheme } from \"../../theme-store\";\nimport type { DeepPartial } from \"../../types\";\nimport type { FlowbiteFloatingArrowTheme } from \"../Floating\";\nimport { getArrowPlacement } from \"../Floating/helpers\";\n\nexport interface FlowbitePopoverTheme {\n  arrow: Omit<FlowbiteFloatingArrowTheme, \"style\">;\n  base: string;\n  content: string;\n}\n\nexport interface PopoverProps extends Omit<ComponentProps<\"div\">, \"content\" | \"style\"> {\n  arrow?: boolean;\n  content: ReactNode;\n  placement?: \"auto\" | Placement;\n  theme?: DeepPartial<FlowbitePopoverTheme>;\n  trigger?: \"hover\" | \"click\";\n  initialOpen?: boolean;\n  open?: boolean;\n  onOpenChange?: Dispatch<SetStateAction<boolean>>;\n}\n\nexport function Popover({\n  children,\n  content,\n  theme: customTheme = {},\n  arrow = true,\n  trigger = \"click\",\n  initialOpen,\n  open: controlledOpen,\n  onOpenChange: setControlledOpen,\n  placement: theirPlacement = \"bottom\",\n  ...props\n}: PopoverProps) {\n  const [uncontrolledOpen, setUncontrolledOpen] = useState<boolean>(Boolean(initialOpen));\n  const arrowRef = useRef<HTMLDivElement>(null);\n\n  const theme = mergeDeep(getTheme().popover, customTheme);\n\n  const open = controlledOpen ?? uncontrolledOpen;\n  const setOpen = setControlledOpen ?? setUncontrolledOpen;\n\n  const floatingProps = useBaseFLoating({\n    open,\n    placement: theirPlacement,\n    arrowRef,\n    setOpen,\n  });\n\n  const {\n    floatingStyles,\n    context,\n    placement,\n    middlewareData: { arrow: { x: arrowX, y: arrowY } = {} },\n    refs,\n  } = floatingProps;\n\n  const { getFloatingProps, getReferenceProps } = useFloatingInteractions({\n    context,\n    role: \"dialog\",\n    trigger,\n  });\n\n  const childrenRef = (children as ComponentPropsWithRef<\"button\">).ref;\n  const ref = useMergeRefs([context.refs.setReference, childrenRef]);\n\n  if (!isValidElement(children)) {\n    throw Error(\"Invalid target element\");\n  }\n\n  const target = useMemo(() => {\n    return cloneElement(\n      children,\n      getReferenceProps({\n        ref,\n        \"data-testid\": \"flowbite-popover-target\",\n        ...children?.props,\n      }),\n    );\n  }, [children, ref, getReferenceProps]);\n\n  return (\n    <>\n      {target}\n      {open && (\n        <FloatingFocusManager context={context} modal>\n          <div\n            className={theme.base}\n            ref={refs.setFloating}\n            data-testid=\"flowbite-popover\"\n            {...props}\n            style={floatingStyles}\n            {...getFloatingProps()}\n          >\n            <div className=\"relative\">\n              {arrow && (\n                <div\n                  className={theme.arrow.base}\n                  data-testid=\"flowbite-popover-arrow\"\n                  ref={arrowRef}\n                  style={{\n                    top: arrowY ?? \" \",\n                    left: arrowX ?? \" \",\n                    right: \" \",\n                    bottom: \" \",\n                    [getArrowPlacement({ placement })]: theme.arrow.placement,\n                  }}\n                >\n                  &nbsp;\n                </div>\n              )}\n              <div className={theme.content}>{content}</div>\n            </div>\n          </div>\n        </FloatingFocusManager>\n      )}\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}