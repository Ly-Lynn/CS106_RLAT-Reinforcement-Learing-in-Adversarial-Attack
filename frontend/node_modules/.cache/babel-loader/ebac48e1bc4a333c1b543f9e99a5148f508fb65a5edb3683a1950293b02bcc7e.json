{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useId, useRef, useState, useEffect } from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport { mergeDeep } from '../../helpers/merge-deep.mjs';\nimport { getTheme } from '../../theme-store/index.mjs';\nconst MegaMenuDropdownToggle = _ref => {\n  let {\n    children,\n    className,\n    theme: customTheme = {},\n    ...props\n  } = _ref;\n  const id = useId();\n  const ref = useRef(null);\n  const [controls, setControls] = useState(void 0);\n  const [isExpanded, setExpanded] = useState(void 0);\n  const theme = mergeDeep(getTheme().megaMenu.dropdownToggle, customTheme);\n  const findDropdown = function () {\n    var _ref$current;\n    const megaMenu = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.closest(\"nav\");\n    return megaMenu === null || megaMenu === void 0 ? void 0 : megaMenu.querySelector('[role=\"menu\"]');\n  };\n  const onClick = function () {\n    var _findDropdown;\n    (_findDropdown = findDropdown()) === null || _findDropdown === void 0 || _findDropdown.classList.toggle(\"hidden\");\n    setExpanded(!isExpanded);\n  };\n  useEffect(() => {\n    const dropdown = findDropdown();\n    const isDropdownHidden = dropdown === null || dropdown === void 0 ? void 0 : dropdown.classList.contains(\"hidden\");\n    setControls(dropdown === null || dropdown === void 0 ? void 0 : dropdown.id);\n    setExpanded(!isDropdownHidden);\n  }, []);\n  return /* @__PURE__ */jsx(\"button\", {\n    \"aria-controls\": controls,\n    \"aria-expanded\": isExpanded,\n    \"aria-haspopup\": \"menu\",\n    id,\n    onClick,\n    ref,\n    className: twMerge(theme.base, className),\n    ...props,\n    children\n  });\n};\nMegaMenuDropdownToggle.displayName = \"MegaMenu.DropdownToggle\";\nexport { MegaMenuDropdownToggle };","map":{"version":3,"names":["MegaMenuDropdownToggle","_ref","children","className","theme","customTheme","props","id","useId","ref","useRef","controls","setControls","useState","isExpanded","setExpanded","mergeDeep","getTheme","megaMenu","dropdownToggle","findDropdown","_ref$current","current","closest","querySelector","onClick","_findDropdown","classList","toggle","useEffect","dropdown","isDropdownHidden","contains","jsx","twMerge","base"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\MegaMenu\\MegaMenuDropdownToggle.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useId, useRef, useState, type ComponentProps, type FC, type MouseEventHandler } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport { mergeDeep } from \"../../helpers/merge-deep\";\nimport { getTheme } from \"../../theme-store\";\nimport { DeepPartial } from \"../../types\";\n\nexport interface FlowbiteMegaMenuDropdownToggleTheme {\n  base: string;\n}\n\nexport interface MegaMenuDropdownToggleProps extends ComponentProps<\"button\"> {\n  theme?: DeepPartial<FlowbiteMegaMenuDropdownToggleTheme>;\n}\n\nexport const MegaMenuDropdownToggle: FC<MegaMenuDropdownToggleProps> = ({\n  children,\n  className,\n  theme: customTheme = {},\n  ...props\n}) => {\n  const id = useId();\n  const ref = useRef<HTMLButtonElement>(null);\n  const [controls, setControls] = useState<string | undefined>(undefined);\n  const [isExpanded, setExpanded] = useState<boolean | undefined>(undefined);\n\n  const theme = mergeDeep(getTheme().megaMenu.dropdownToggle, customTheme);\n\n  const findDropdown = function () {\n    const megaMenu = ref.current?.closest(\"nav\");\n\n    return megaMenu?.querySelector('[role=\"menu\"]');\n  };\n\n  const onClick: MouseEventHandler<HTMLButtonElement> = function () {\n    findDropdown()?.classList.toggle(\"hidden\");\n\n    setExpanded(!isExpanded);\n  };\n\n  useEffect(() => {\n    const dropdown = findDropdown();\n    const isDropdownHidden = dropdown?.classList.contains(\"hidden\");\n\n    setControls(dropdown?.id);\n    setExpanded(!isDropdownHidden);\n  }, []);\n\n  return (\n    <button\n      aria-controls={controls}\n      aria-expanded={isExpanded}\n      aria-haspopup=\"menu\"\n      id={id}\n      onClick={onClick}\n      ref={ref}\n      className={twMerge(theme.base, className)}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\n\nMegaMenuDropdownToggle.displayName = \"MegaMenu.DropdownToggle\";\n"],"mappings":";;;;;;;AAQA,MAAEA,sBAAQ,GAAAC,IAAA,IAKR;EAAA,IALQ;IACRC,QAAA;IACAC,SAAO;IACPC,KAAG,EAAAC,WAAK;IACT,GAAAC;EACD,IAAAL,IAAA;EACE,MAAMM,EAAA,GAAGC,KAAG,EAAM;EAClB,MAAMC,GAAC,GAAAC,MAAU;EACjB,MAAM,CAACC,QAAA,EAAUC,WAAE,IAAYC,QAAG,MAAS,EAAK;EAChD,MAAM,CAAAC,UAAQ,EAAAC,WAAU,IAAUF,QAAC,CAAQ,KAAC;EAC5C,MAAMT,KAAA,GAAAY,SAAe,CAAAC,QAAW,GAAAC,QAAA,CAAAC,cAAA,EAAAd,WAAA;EAClC,MAAIe,YAAc,GAAG,SAAAA,CAAA,EAAa;IAAA,IAAAC,YAAA;IAC9B,MAAAH,QAAO,IAAAG,YAAA,GAAUZ,GAAA,CAAAa,OAAA,cAAAD,YAAA,uBAAAA,YAAA,CAAaE,OAAC;IAC/B,OAAAL,QAAA,aAAAA,QAAA,uBAAAA,QAAA,CAAAM,aAAA;EACF;EACF,MAAIC,OAAA,GAAc,SAAAA,CAAA,EAAW;IAAA,IAAAC,aAAA;IACzB,CAAAA,aAAA,GAAAN,YAAY,CAAC,eAAAM,aAAA,eAAbA,aAAA,CAAaC,SAAY,CAAAC,MAAA;IACzBb,WAAA,EAAAD,UAAA;EACF;EACFe,SAAU,OAAQ;IACd,MAAMC,QAAA,GAAAV,YAAmB;IACzB,MAAAW,gBAAsB,GAAGD,QAAC,aAADA,QAAC,uBAADA,QAAC,CAAAH,SAAA,CAAAK,QAAA;IAC1BpB,WAAW,CAACkB,QAAC,aAADA,QAAC,uBAADA,QAAC,CAAAvB,EAAA;IACdQ,WAAM,EAAAgB,gBAAA;EACP;EACF,OAAI,eAAQE,GAAA,CACR,UACJ;IACM,eAAe,EAAEtB,QAAA;IACjB,eAAe,EAAEG,UAAM;IACvB,eAAE;IACFP,EAAA;IACAkB,OAAG;IACHhB,GAAA;IACAN,SAAQ,EAAA+B,OAAA,CAAA9B,KAAA,CAAA+B,IAAA,EAAAhC,SAAA;IACR,GAAAG,KAAQ;IACTJ;EACD,CACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}