{"ast":null,"code":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { isClient } from '../helpers/is-client.mjs';\nimport { useWatchLocalStorageValue } from './use-watch-localstorage-value.mjs';\nimport { getThemeMode } from '../theme-store/index.mjs';\nconst DEFAULT_MODE = \"light\";\nconst LS_THEME_MODE = \"flowbite-theme-mode\";\nconst SYNC_THEME_MODE = \"flowbite-theme-mode-sync\";\nconst useThemeMode = () => {\n  const [mode, setMode] = useState(getInitialMode(getThemeMode()));\n  useEffect(() => {\n    setModeInLS(mode);\n    setModeInDOM(mode);\n  }, []);\n  useWatchLocalStorageValue({\n    key: LS_THEME_MODE,\n    onChange(newValue) {\n      if (newValue) return handleSetMode(newValue);\n    }\n  });\n  useSyncMode(mode2 => setMode(mode2));\n  const handleSetMode = mode2 => {\n    setMode(mode2);\n    setModeInLS(mode2);\n    setModeInDOM(mode2);\n    document.dispatchEvent(new CustomEvent(SYNC_THEME_MODE, {\n      detail: mode2\n    }));\n  };\n  const toggleMode = () => {\n    let newMode = mode;\n    if (newMode === \"auto\") newMode = computeModeValue(newMode);\n    newMode = newMode === \"dark\" ? \"light\" : \"dark\";\n    handleSetMode(newMode);\n  };\n  const clearMode = () => {\n    const newMode = getThemeMode() ?? DEFAULT_MODE;\n    handleSetMode(newMode);\n  };\n  return {\n    mode,\n    computedMode: computeModeValue(mode),\n    setMode: handleSetMode,\n    toggleMode,\n    clearMode\n  };\n};\nconst useSyncMode = onChange => {\n  useEffect(() => {\n    function handleSync(e) {\n      const mode = e.detail;\n      onChange(mode);\n    }\n    document.addEventListener(SYNC_THEME_MODE, handleSync);\n    return () => document.removeEventListener(SYNC_THEME_MODE, handleSync);\n  }, []);\n};\nconst setModeInLS = mode => localStorage.setItem(LS_THEME_MODE, mode);\nconst setModeInDOM = mode => {\n  const computedMode = computeModeValue(mode);\n  if (computedMode === \"dark\") {\n    document.documentElement.classList.add(\"dark\");\n  } else {\n    document.documentElement.classList.remove(\"dark\");\n  }\n};\nconst getInitialMode = defaultMode => {\n  if (!isClient()) return DEFAULT_MODE;\n  const LSMode = localStorage.getItem(LS_THEME_MODE);\n  return LSMode ?? defaultMode ?? DEFAULT_MODE;\n};\nconst computeModeValue = mode => {\n  return mode === \"auto\" ? prefersColorScheme() : mode;\n};\nconst prefersColorScheme = () => {\n  return window.matchMedia?.(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n};\nexport { useThemeMode };","map":{"version":3,"names":["DEFAULT_MODE","LS_THEME_MODE","SYNC_THEME_MODE","useThemeMode","mode","setMode","useState","getInitialMode","getThemeMode","useEffect","setModeInLS","setModeInDOM","useWatchLocalStorageValue","key","onChange","newValue","handleSetMode","useSyncMode","mode2","document","dispatchEvent","CustomEvent","detail","toggleMode","newMode","computeModeValue","clearMode","computedMode","handleSync","e","addEventListener","removeEventListener","localStorage","setItem","documentElement","classList","add","remove","defaultMode","isClient","LSMode","getItem","prefersColorScheme","window","matchMedia","matches"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\hooks\\use-theme-mode.ts"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { isClient } from \"../helpers/is-client\";\nimport { useWatchLocalStorageValue } from \"../hooks/use-watch-localstorage-value\";\nimport { getThemeMode } from \"../theme-store\";\n\nconst DEFAULT_MODE: ThemeMode = \"light\";\nconst LS_THEME_MODE = \"flowbite-theme-mode\";\nconst SYNC_THEME_MODE = \"flowbite-theme-mode-sync\";\n\nexport type ThemeMode = \"light\" | \"dark\" | \"auto\";\n\nexport const useThemeMode = () => {\n  const [mode, setMode] = useState<ThemeMode>(getInitialMode(getThemeMode()));\n\n  /**\n   * Persist `mode` in local storage and add/remove `dark` class on `html`\n   */\n  useEffect(() => {\n    setModeInLS(mode);\n    setModeInDOM(mode);\n  }, []);\n\n  /**\n   * Sync all tabs with the latest theme mode value\n   */\n  useWatchLocalStorageValue({\n    key: LS_THEME_MODE,\n    onChange(newValue) {\n      if (newValue) return handleSetMode(newValue as ThemeMode);\n    },\n  });\n\n  /**\n   * Keep the other instances of the hook in sync (bi-directional)\n   */\n  useSyncMode((mode) => setMode(mode));\n\n  /**\n   * Sets `mode` to a given value: `light | dark` | `auto`\n   */\n  const handleSetMode = (mode: ThemeMode) => {\n    setMode(mode);\n    setModeInLS(mode);\n    setModeInDOM(mode);\n    document.dispatchEvent(new CustomEvent(SYNC_THEME_MODE, { detail: mode }));\n  };\n\n  /**\n   * Toggles between: `light | dark`\n   */\n  const toggleMode = () => {\n    let newMode = mode;\n\n    if (newMode === \"auto\") newMode = computeModeValue(newMode);\n\n    newMode = newMode === \"dark\" ? \"light\" : \"dark\";\n\n    handleSetMode(newMode);\n  };\n\n  /**\n   * Sets the value to `<Flowbite theme={{ mode }}>` prop\n   */\n  const clearMode = () => {\n    const newMode = getThemeMode() ?? DEFAULT_MODE;\n\n    handleSetMode(newMode);\n  };\n\n  return { mode, computedMode: computeModeValue(mode), setMode: handleSetMode, toggleMode, clearMode };\n};\n\n/**\n * Custom event listener on `SYNC_THEME_MODE`\n */\nconst useSyncMode = (onChange: (mode: ThemeMode) => void) => {\n  useEffect(() => {\n    function handleSync(e: Event) {\n      const mode = (e as CustomEvent<ThemeMode>).detail;\n\n      onChange(mode);\n    }\n\n    document.addEventListener(SYNC_THEME_MODE, handleSync);\n    return () => document.removeEventListener(SYNC_THEME_MODE, handleSync);\n  }, []);\n};\n\n/**\n * Sets the give value in local storage\n */\nconst setModeInLS = (mode: ThemeMode) => localStorage.setItem(LS_THEME_MODE, mode);\n\n/**\n * Add or remove class `dark` on `html` element\n */\nconst setModeInDOM = (mode: ThemeMode) => {\n  const computedMode = computeModeValue(mode);\n\n  if (computedMode === \"dark\") {\n    document.documentElement.classList.add(\"dark\");\n  } else {\n    document.documentElement.classList.remove(\"dark\");\n  }\n};\n\nconst getInitialMode = (defaultMode?: ThemeMode): ThemeMode => {\n  if (!isClient()) return DEFAULT_MODE;\n\n  const LSMode = localStorage.getItem(LS_THEME_MODE) as ThemeMode | undefined;\n\n  return LSMode ?? defaultMode ?? DEFAULT_MODE;\n};\n\n/**\n * Parse `auto` mode value to either `light` or `dark`\n * @returns `light` | `dark`\n */\nconst computeModeValue = (mode: ThemeMode): ThemeMode => {\n  return mode === \"auto\" ? prefersColorScheme() : mode;\n};\n\n/**\n * Get browser prefered color scheme\n * @returns `light` | `dark`\n */\nconst prefersColorScheme = (): ThemeMode => {\n  return window.matchMedia?.(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n};\n"],"mappings":";;;;;;AAOA,MAAMA,YAAA,GAAa,OAAG;AACtB,MAAMC,aAAA,GAAe,qBAAG;AACZ,MAACC,eAAe,6BAAM;AAClC,MAAEC,YAAa,GAAAA,CAAA,KAAW;EACxB,OAAAC,IAAU,EAAAC,OAAM,IAAAC,QAAA,CAAAC,cAAA,CAAAC,YAAA;EAClBC,SAAI,OAAY;IACZC,WAAA,CAAYN,IAAC,CAAI;IAClBO,YAAM,CAAAP,IAAA;EACP;EACFQ,yBAAsB;IAClBC,GAAA,EAAAZ,aAAiB;IACrBa,QAAUA,CAAAC,QAAQ;MAClB,IAAQA,QAAO,EACV,OAAAC,aAAA,CAAAD,QAAA;IACD;EACF;EACAE,WAAM,CAAAC,KAAA,IAAiBb,OAAK,CAAAa,KAAK;EACnC,MAAIF,aAAe,GAAAE,KAAA;IACfb,OAAA,CAAAa,KAAY;IACZR,WAAA,CAAYQ,KAAC,CAAK;IAClBP,YAAS,CAAAO,KAAA;IACTC,QAAA,CAAAC,aAAA,KAAAC,WAAA,CAAAnB,eAAA;MAAAoB,MAAA,EAAAJ;IAAA;EACF;EACF,MAAQK,UAAU,GAAAA,CAAA,KAAK;IACnB,IAAIC,OAAO,GAAApB,IAAK;IACpB,IAAMoB,OAAO,KAAG,QACZA,OAAO,GAAGC,gBAAkB,CAAAD,OAAG;IAC/BA,OAAA,GAAAA,OAAc,KAAQ,MAAC;IACvBR,aAAA,CAAAQ,OAAA;EACF;EACF,MAAIE,SAAa,GAAGA,CAAA;IAChB,MAAAF,OAAa,GAAChB,YAAS,MAAAR,YAAA;IACvBgB,aAAA,CAAAQ,OAAA;EACF;EACA;IAAApB,IAAA;IAAAuB,YAAA,EAAAF,gBAAA,CAAArB,IAAA;IAAAC,OAAA,EAAAW,aAAA;IAAAO,UAAA;IAAAG;EAAA;AACF;AACA,MAAET,WAAU,GAAMH,QAAA;EAClBL,SAAI,OAAS;IACb,SAAYmB,UAASA,CAAAC,CAAA,EAAM;MACrB,MAAAzB,IAAS,GAAIyB,CAAC,CAACP,MAAA;MAChBR,QAAA,CAAAV,IAAA;IACD;IACAe,QAAO,CAAAW,gBAAe,CAAA5B,eAAmB,EAAC0B,UAAA;IAC3C,OAAM,MAAAT,QAAA,CAAAY,mBAAA,CAAA7B,eAAA,EAAA0B,UAAA;EACP;AACF;AACA,MAAMlB,WAAA,GAAeN,IAAC,IAAI4B,YAAK,CAAAC,OAAA,CAAAhC,aAAA,EAAAG,IAAA;AAC/B,MAAEO,YAAM,GAAYP,IAAG;EACrB,MAAIuB,YAAY,GAAKF,gBAAQ,CAAArB,IAAA;EAC/B,IAAIuB,YAAS,WAAgB;IAC1BR,QAAM,CAAAe,eAAA,CAAAC,SAAA,CAAAC,GAAA;EACT,OAAI;IACDjB,QAAA,CAAAe,eAAA,CAAAC,SAAA,CAAAE,MAAA;EACD;AACF;AACA,MAAM9B,cAAW,GAAA+B,WAAA;EACjB,IAAI,CAAAC,QAAO,IACT,OAAMvC,YAAS;EACf,MAAAwC,MAAO,GAAMR,YAAI,CAAWS,OAAI,CAAAxC,aAAa;EAC7C,OAAAuC,MAAA,IAAAF,WAAA,IAAAtC,YAAA;AACF;AACA,MAAEyB,gBAAgB,GAAMrB,IAAG;EACzB,OAAAA,IAAA,cAAAsC,kBAAA,KAAAtC,IAAA;AACF;AACA,MAAEsC,kBAAc,GAAUA,CAAA,KAAG;EAC5B,OAAAC,MAAA,CAAAC,UAAA,mCAAAC,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}