{"ast":null,"code":"import { forwardRef, createElement } from 'react';\nconst ButtonBase = forwardRef((_ref, ref) => {\n  let {\n    children,\n    as: Component,\n    href,\n    type = \"button\",\n    ...props\n  } = _ref;\n  const BaseComponent = Component || (href ? \"a\" : \"button\");\n  return createElement(BaseComponent, {\n    ref,\n    href,\n    type,\n    ...props\n  }, children);\n});\nButtonBase.displayName = \"ButtonBaseComponent\";\nexport { ButtonBase };","map":{"version":3,"names":["ButtonBase","forwardRef","_ref","ref","children","as","Component","href","type","props","BaseComponent","createElement","displayName"],"sources":["C:\\Users\\thuyl\\OneDrive - Trường ĐH CNTT - University of Information Technology\\My documents\\AI\\ai-project\\node_modules\\flowbite-react\\src\\components\\Button\\ButtonBase.tsx"],"sourcesContent":["import type { ComponentPropsWithoutRef, ElementType, ForwardedRef } from \"react\";\nimport { createElement, forwardRef } from \"react\";\n\nexport type ButtonBaseProps<T extends ElementType = \"button\"> = {\n  as?: T;\n  href?: string;\n} & ComponentPropsWithoutRef<T>;\n\nexport const ButtonBase = forwardRef(\n  <T extends ElementType = \"button\">(\n    { children, as: Component, href, type = \"button\", ...props }: ButtonBaseProps<T>,\n    ref: ForwardedRef<T>,\n  ) => {\n    const BaseComponent = Component || (href ? \"a\" : \"button\");\n\n    return createElement(BaseComponent, { ref, href, type, ...props }, children);\n  },\n);\n\nButtonBase.displayName = \"ButtonBaseComponent\";\n"],"mappings":";AAEY,MAACA,UAAU,GAAGC,UAAU,CAClC,CAAAC,IAAA,EAA+DC,GAAG,KAAK;EAAA,IAAtE;IAAEC,QAAQ;IAAEC,EAAE,EAAEC,SAAS;IAAEC,IAAI;IAAEC,IAAI,GAAG,QAAQ;IAAE,GAAGC;EAAK,CAAE,GAAAP,IAAA;EAC3D,MAAMQ,aAAa,GAAGJ,SAAS,KAAKC,IAAI,GAAG,GAAG,GAAG,QAAQ,CAAC;EAC1D,OAAOI,aAAa,CAACD,aAAa,EAAE;IAAEP,GAAG;IAAEI,IAAI;IAAEC,IAAI;IAAE,GAAGC;EAAK,CAAE,EAAEL,QAAQ,CAAC;AAChF,CACA;AACAJ,UAAU,CAACY,WAAW,GAAG,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}